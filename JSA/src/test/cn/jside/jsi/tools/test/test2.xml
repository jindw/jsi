<properties>
<entry key="export">com.baidu.webim.ui:UIConnector,com.baidu.webim:XHRConnector,com.baidu.webim:SharedData,com.baidu.webim:Controller</entry>
<entry key='com/baidu/webim/util/json.js'>/**
 * @public
 * @param data
 * @return JSON
 */
var JSON = {
    /**
     * 解析JSON文本
     * @public 解析
     * @owner JSON
     */
    parse : function(data){
        return window.Eval("("+data+")")
    },
    /**
     * 以JSON格式，系列化javascript对象
     * @public
     * @owner JSON
     * @param &lt;Object&gt; value
     * @return &lt;String&gt; json 表达式
     */
    serialize : serialize
}

/**
 * @internal
 */
var stringRegexp = /["\\\x00-\x1f\x7f-\x9f]/g;
/**
 * 转义替换字符
 * @internal
 */
var charMap = {
    '\b': '\\b',
    '\t': '\\t',
    '\n': '\\n',
    '\f': '\\f',
    '\r': '\\r',
    '"' : '\\"',
    '\\': '\\\\'
};
/**
 * 转义替换函数
 * @internal
 */
function charReplacer(item) {
    var c = charMap[item];
    if (c) {
        return c;
    }
    c = item.charCodeAt().toString(16);
    return '\\u00' + (c.length&gt;1?c:'0'+c);
}
/**
 * JSON 串行化实现
 * @internal
 */
function serialize(value) {
    switch (typeof value) {
        case 'string':
            return '"' + (stringRegexp.test(value) ?
                            value.replace(stringRegexp,charReplacer) :
                            value)
                       + '"';
        case 'object':
            if (!value) {
                return 'null';
            }
            var buf = [];
            if (value instanceof Array) {
                var i = value.length;
                while (i--) {
                    buf[i] = serialize(value[i]) || 'null';
                }
                return '[' + buf.join(',') + ']';
            }
            for (var k in value) {
                var v = serialize(value[k]);
                if (v) {
                    buf.push(serialize(k) + ':' + v);
                }
            }
            return '{' + buf.join(',') + '}';
        case 'number':
            if(isFinite(value)){
                value = 'null';
            }
        default:
            return String(value);
    }
}</entry>
<entry key='com/baidu/webim/util/__package__.js'>/*
 * WEBIM 的公共库
 */
this.addScript('json.js','JSON');
this.addScript('request.js',"Request");
this.addScript('cookie.js',"Cookie");
this.addScript('element.js',['R','Element']);
this.addScript('event.js',['addEventObserver']);
﻿this.addScript('fn.js',['ellipseString','toXmlEntryReplacer','returnFalse','returnTrue']);
﻿this.addScript('tween.js','Tween',
                'R');
﻿//this.addScript('task-list.js','TaskList');
</entry>
<entry key='com/baidu/webim/message/client-side.js'>/**
 * 抽象消息类，所有消息的基类。
 * 对于请求消息。系统调用其 before方法（请求前调用），after方法（数据返回后回调）
 * 发送的数据由其toString方法提供。
 * 对于服务端指令，系统调用其execute方法。
 */
function ClientSideMessage(type){
    this.type = type;
}
var paramTemplate = 'type&amp;to&amp;param&amp;content';
ClientSideMessage.prototype = {
    /**
     * 消息（命令）名称
     * @id ClientSideMessage.prototype.type
     * @typeof string
     */
    //type:'',
    /**
     * x-www-form-urlencoded 编码表示，可直接发送给http服务器
     * @owner ClientSideMessage.prototype
     */
    toString : function(){
        var msg = this;
        return paramTemplate.replace(/\w+/g,function(key){
                var value = msg[key];
                if(value!=null){
                    if(value instanceof Object){
                        value = JSON.serialize(value);
                    }
                }
                return value ?
                        key+'='+encodeURIComponent(value)
                       :'';
            });
    },
    /**
     * 发送之前执行（对于请求消息）
     * @owner ClientSideMessage.prototype
     */
    before:Function.prototype,
    /**
     * 请求完成返回数据之后执行（对于请求消息）
     * @owner ClientSideMessage.prototype
     */
    after:Function.prototype
}
</entry>
<entry key='com/baidu/webim/message/__package__.js'>this.addScript('server-side.js',['ServerSideMessage','CommandMessage','FeedbackMessage','ActionMap']);
this.addScript('client-side.js',['ClientSideMessage']);
this.addDependence('ClientSideMessage','com.baidu.webim.util.JSON',false);



this.addDependence('ActionMap','com.baidu.webim.ui.*',false);
this.addDependence('ActionMap','com.baidu.webim.util.JSON',true);
this.addDependence('ActionMap','com.baidu.webim.SharedData',true);</entry>
<entry key='com/baidu/webim/controller.js'>/*
 * WEBIM UI 层的与消息层 的衔接面
 */

/**
 * 消息分发控制器，处理单个消息、消息拆包、分发
 * @author jindw#xidea.org
 */
var Controller = {
    /**
     * 设置连接器实现，初始化控制器
     * @param &lt;XHRConnnector|?&gt; 连接器 
     * @owner Controller
     * @public
     */
    initialize:function(conn){
        connector = conn;
        var startMsg = new ClientSideMessage('start');
        startMsg.content = new Date();
        startMsg.after = function(msg){
            if(msg &amp;&amp; msg.type == 'ok'){
                Controller.start();
            }else{//needLogin
                LoginManager.showLogin();
            }
        }
        this.sendMessage(startMsg);
    },
    /**
     * 启动消息监听器
     * @owner Controller
     * @public
     */
    start:function(){
        connector.waitMessage();
    },
    /**
     * 关闭消息监听器
     * @owner Controller
     * @public
     */
    stop:function(){
        var stopMsg = new ClientSideMessage('stop');
        this.sendMessage(stopMsg);
        connector.disconnect();
    },
    /**
     * 像服务端发送消息
     * @param &lt;ClientSideMessage&gt; msg 消息对象
     * @owner Controller
     * @public
     */
    sendMessage:function(msg){
        msg.before();
        connector.sendMessage(msg);
    },
    /**
     * 收取消息，唤起相关处理程序
     * @param &lt;MessageData&gt;msg 收取的消息
     * @return &lt;int&gt; 下次消息等待时间,-1为终止消息接收
     * @owner Controller
     * @public
     */
    receiveMessage:function(msg){
        if(msg instanceof Array){
            var i=msg.length
            var flag = false;
            while(i--){
                flag = msg[i].execute() || flag;
            }
            return flag;
        }else{
            return msg.execute();
        }
    }
}
var connector;</entry>
<entry key='com/baidu/webim/__package__.js'>this.addScript('xhrconnector.js',['XHRConnector'],
                null,
                ['Controller','com.baidu.webim.message.*']);

this.addScript('controller.js',['Controller'],
                null,
                ['com.baidu.webim.message.*','com.baidu.webim.ui.*']);
this.addScript('shared-data.js',['SharedData']);


this.addDependence('*','com.baidu.webim.util.*',true);



</entry>
<entry key='com/baidu/webim/util/request.js'>if(this.ActiveXObject &amp;&amp; !window.XMLHttpRequest){
    var xmlHttpRequstActiveId = ["Microsoft.XMLHTTP","MSXML2.XMLHTTP", "MSXML2.XMLHTTP.3.0","Msxml2.XMLHTTP.4.0","Msxml2.XMLHTTP.5.0"];
    /**
     * 统一的 XMLHttpRequest 构造器（对于ie，做一个有返回值的构造器（这时new操作返回该返回值），返回他支持的AxtiveX控件）
     * 关于 XMLHttpRequest对象的详细信息请参考
     * &lt;ul&gt;
     *   &lt;li&gt;&lt;a href="http://www.w3.org/TR/XMLHttpRequest/"&gt;W3C XMLHttpRequest&lt;/a&gt;&lt;/li&gt;
     *   &lt;li&gt;&lt;a href="http://www.ikown.com/manual/xmlhttp/index.htm"&gt;中文参考&lt;/a&gt;&lt;/li&gt;
     * &lt;/ul&gt;
     * &lt;br&gt;&lt;br&gt;&lt;i&gt;JSDOC ： 对于FF等有内置 XMLHttpRequest 对象的浏览器，jsdoc解析时会报错。请直接参看上述链接文档，不必理会jsdoc的解析结果。&lt;/i&gt;
     * @constructor
     */
    window.XMLHttpRequest = function(){
        if(xmlHttpRequstActiveId instanceof Array){
            var i = xmlHttpRequstActiveId.length;
            while(i--){
                try{
                     var impl = new ActiveXObject(xmlHttpRequstActiveId[i]);
                     xmlHttpRequstActiveId = xmlHttpRequstActiveId[i];
                     return impl;
                }catch (e){}
             }
        }else{
            return new ActiveXObject(xmlHttpRequstActiveId);
        }
    };
}
/**
 * &lt;p&gt;XMLHttpRequest请求包装类，默认为异步方式。
 * 若希望使用异步方式,在调用send方法时指定第二个参数asynchronous=true
 * 通过setXXXListener,addXXXListener 添加事件回调函数。
 * 支持的事件有 [step,success,failure]
 * 以添加自定义行为&lt;/p&gt;
 * eg:
 * &lt;code&gt;&lt;pre&gt;
 * new Request(url,{username:xxx,password:yyy})
 *   //若成功，提示success
 *   .setSuccessListener (function(){
 *                        alert('success')
 *                      })
 *   //若失败，提示fail
 *   .setFailureListener (function(){
 *                        alert('fail')
 *                      })
 *   //传送 参数表：param1=1,指定请求方式为异步
 *   .send({param1:1},true);&lt;/pre&gt;
 * &lt;/code&gt;
 * @constructor
 * @param url 请求地址
 * @param options 请求选项
 */
function Request(url,options,onSuccess,onFailure,onStep) {
    this.xhr = new XMLHttpRequest();
    this.onSuccess = onSuccess;
    this.onFailure = onFailure;
    this.onStep = onStep;
    this.options = options = new RequestOptions(url,options);
    this.headers = {
                      "Accept":"'text/javascript, text/html, application/xml, text/xml, */*'",
                      "Content-Type":options.contentType
                   };
    var _this = this;
    this.onreadystatechange = function(){
      var state = _this.xhr.readyState;
      _this.onStep &amp;&amp; _this.onStep(state);
      if(state == 4){
          //  break;
          //case 4: // (完成) 数据接收完毕,此时可以通过通过responseBody和responseText获取完整的回应数据
          if(_this.isSuccess()){
            _this.onSuccess &amp;&amp; _this.onSuccess();
          }else{
            _this.onFailure &amp;&amp; _this.onFailure();
          }
          _this.free = true;
          _this.xhr.onreadystatechange = Function.prototype;
      }
      //case 0: //(未初始化)  对象已建立，但是尚未初始化（尚未调用open方法）
      //case 1: // (初始化)  对象已建立，尚未调用send方法
      //case 2: // (发送数据) send方法已调用，但是当前的状态及http头未知
      //case 3: // (数据传送中)  已接收部分数据，因为响应及http头不全，这时通过responseBody和responseText获取部分数据会出现错误，
    };
    this.free = true;
};


Request.prototype = {
    /**
     * 发送请求
     * @public
     * @owner Request.prototype
     * @param params
     * @sync 同步请求，默认为false，即默认为异步请求
     * @return void 因为无法判断异步请求何时完成，所有。不要在send请求发送后在做设置操作。
     */
    send :  function(params,sync){
        this.free = false;
        
        var headers = this.headers;
        var options = this.options;
        //params = buildQueryString(params);
        sync = sync || options.sync;
        if (/post/i.test(options.method)) {
            //headers['Content-type'] = this.options.contentType;
            /* Force "Connection: close" for Mozilla browsers to work around
             * a bug where XMLHttpReqeuest sends an incorrect Content-length
             * header. See Mozilla Bugzilla #246651.
             */
            if (this.xhr.overrideMimeType){
                headers['Connection'] = 'close';
            }
        }
        this.xhr.open(options.method, options.url,!sync);
        this.xhr.onreadystatechange = this.onreadystatechange;
        for(var n in headers){
            //$log.debug(n,headers[n]);
            this.xhr.setRequestHeader(n,headers[n]);
        }
        this.xhr.send(params);
    },
    /**
     * 判断请求是否成功
     * @public
     * @owner Request.prototype
     * @return &lt;boolean || null&gt; 成败或未知(null)
     */
    isSuccess : function() {
      var status = this.getStatus();
      return status ?status &gt;= 200 &amp;&amp; status &lt; 300 : null;
    },
    getStatus:function(){
        var xhr = this.xhr;
        //xml 呢？
        return xhr.readyState  == 4 &amp;&amp;((xhr.responseText || xhr.responseXML) &amp;&amp; xhr.status);
    },
    /**
     * 设置请求http头。（在每次send调用之前有效）
     * @public
     * @owner Request.prototype
     * @param key 
     * @param value
     * @return &lt;Request&gt; request 本身，以便继续操作
     */
    setHeader : function(key,value){
        this.headers[key] = value;
        return this;
    },
    /**
     * 当前请求响应头
     * @public
     * @owner Request.prototype
     * @return &lt;String&gt;
     */
    getHeader : function(name) {
      if(this.xhr.readyState &gt;= 3){
        return this.xhr.getResponseHeader(name);
      }else{
        $log.debug("response not complete");
      }
    },
    /**
     * 将当前请求返回文本当脚本程序执行
     * @public
     * @owner Request.prototype
     * @return 执行结果
     */
    EvalResult : function() {
      if(this.xhr.readyState == 4){
        return window.Eval(this.xhr.responseText);
      }else{
        $log.debug("response not complete");
      }
    },
    /**
     * 将当前请求返回XMLDocument
     * @public
     * @owner Request.prototype
     * @return XMLDocument
     */
    getXML : function() {
      if(this.xhr.readyState == 4){
        return this.xhr.responseXML;
      }else{
        $log.debug("response not complete");
      }
    },
    
    /**
     * 将当前请求返回XMLDocument文本
     * @public
     * @owner Request.prototype
     * @return String
     */
    getText : function() {
      if(this.xhr.readyState &gt;= 3){
        return this.xhr.responseText;
      }else{
        $log.debug("response not complete");
      }
    }

};

function RequestOptions(url,options){
    this.url = url;
    if(options.constructor == String){
        this.method = options;
    }else{
        for(var n in options){
            this[n] = options[n];
        }
    }
}
RequestOptions.prototype =    {
    method:        'get',
    contentType:  'application/x-www-form-urlencoded',
    encoding:     'UTF-8'
}

</entry>
<entry key='com/baidu/webim/util/cookie.js'>/**
 * Cookie 操作类
 * 优化说明，重视多次读取效率。写入次之
 * @author jindw@xidea.org
 */
function Cookie(name,path,expires,domain,secure){
    this.name = encodeURIComponent(name);
    this.path = path;
    this.expires = expires;
    this.domain = domain;
    this.secure = secure;
}
/**
 * 
 */
function buildPostfix(path,expires,domain,secure){
    return (path ? "; path=" + path : "" )+ 
      (expires ? "; expires=" + expires.toGMTString() : "" )+ 
      (domain ? "; domain=" + domain :"")+ 
      (secure?"; secure":'');
}
/**
 * 设值
 * @param &lt;String&gt; value
 */
Cookie.prototype.set = function (value){
  document.cookie = this.name + "=" + encodeURIComponent(value) 
     + buildPostfix(this.path,this.expires,this.domain,this.secure);
}
/**
 * 删除
 * @param &lt;String&gt; value 
 */
Cookie.prototype.remove = function (){
  document.cookie = this.name + "=" 
     + buildPostfix(this.path,new Date(0),this.domain,this.secure);
}
/**
 * 取值
 * @return &lt;string&gt;
 */
Cookie.prototype.get = function (){
    var exp = new RegExp("^(?:.*"+ this.name+ "=([^;]*))?.*");
    return (this.get = function(){
      var value = document.cookie.replace(exp,'$1');
      return value &amp;&amp; decodeURIComponent(value);
    })();
}
</entry>
<entry key='com/baidu/webim/util/element.js'>/**
 * 缩写自wrap，兼取其音，原G函数，包装Html元素，给其添加适当的属性。
 * @param &lt;HTMLElement||String&gt;el 
 */
function R(el) {
    if (el.constructor == String) {
        el = document.getElementById(el);
    }
    var p = Element.prototype;
    if (el.wrapVersion==p.wrapVersion){
        return el;
    }
    for(var n in p){
        el[n] = p[n];
    }
    return el;
}

/**
 * HTML 元素扩展
 * @param
 */
var Element = function (el) {
    if (el.constructor == String) {
        el = document.createElement(el);
    }
    return R(el);
};
Element.prototype = {
    wrapVersion :1,
    /**
     * 显示元素
     * @owner Element.prototype
     */
    show: function (display) {
        this.style.display = display || "";
        return this;
    },
    /**
     * 隐藏元素
     * @owner Element.prototype
     */
    hide: function () {
        this.style.display = "none";
        return this;
    },
    /**
     * 清理文本节点
     * @owner Element.prototype
     */
    clear: function () {
        var nodes = this.childNodes;
        var i = nodes.length;
        while(i--){
            var node = nodes.item(i);
            if(node.nodeType != 1){
                this.removeChild(node);
            }
        }
        return this;
    },
    /**
     * 设置样式，可以批量设置或单个设置
     * @owner Element.prototype
     */
    setStyle: function (style,value) {
        if(style.constructor == String){
            this.style[style] = value;
        }else{
            for(var value in style){
                this.style[value] = style[value];
            }
        }
        return this;
    },
//    /**
//     * 获得元素的绝对位置\
//     * TODO:貌似并不可靠？
//     * @public
//     * @owner Element.prototype
//     */
//    getPosition : function() {
//        var l = 0, t = 0;
//        var el = this;
//        do {
//            l += el.offsetLeft || 0;
//            t += el.offsetTop || 0;
//            el = el.offsetParent;
//        } while (el);
//        return  {
//            left: l,
//            top: t
//        }
//    },
//    /**
//     * 给指定元素增加或删除class
//     * @public
//     * @owner Element.prototype
//     */
//    replaceClass : function(removeClass,addClass){
//        var oldNames = this.className;
//        if(oldNames){
//            oldNames = oldNames.split(/\s+/);
//            if(removeClass){
//                var i = oldNames.length;
//                while(i--){
//                    if(oldNames[i] == removeClass){
//                      oldNames.splice(i,0)
//                    }
//                }
//            }
//        }
//        addClass &amp;&amp; oldNames &amp;&amp; oldNames.push(addClass);
//        this.className = oldNames &amp;&amp; oldNames.join(' ') || addClass;
//        return this;
//    },
    /**
     * 设置透明度
     * @public
     * @owner Element.prototype
     */
    setOpacity: function (opacity) {
        //this.style.visibility = opacity &lt; 0.001 ?"hidden":"visible";
        if (!this.currentStyle || !this.currentStyle.hasLayout){
            this.style.zoom = 1;
        }
        if (window.ActiveXObject){
            this.style.filter = (opacity == 1) ? '' : "alpha(opacity=" + opacity * 100 + ")";
        }
        this.style.opacity = opacity;
        return this;
    }
};</entry>
<entry key='com/baidu/webim/util/event.js'>/**
 * 挂载全局事件的观察函数
 */
function addEventObserver(el,type,fn){
    if(el.addEventListener){
        el.addEventListener(type,fn,false);
    }else{
        el.attachEvent('on'+type,fn);
    }
}</entry>
<entry key='com/baidu/webim/util/fn.js'>/**
 * 事件阻止函数
 * 如禁止编辑区控件选择，禁止ie文本选择
 */
function returnFalse(){
    return false;
}
/**
 * 取真空函数
 */
function returnTrue(){
    return true;
}

/*
 * 字符省略函数
 */
function ellipseString (str, len){
    if (str.length * 2 &gt; len) {
        for (var i = 0, l = str.length, trueLen = 0; i &lt; l; i++) {
            trueLen++;
            if (str.charCodeAt(i) &gt; 127) {
                trueLen++;
            }
            if (trueLen &gt; len) {
                return str.substr(0, i) + "...";
            }
        }
    }
    
    return str;
}
/**
 * 
 */
function toXmlEntryReplacer(ch){
    return xmlEntry[ch]||ch;
}
//function toXmlTextReplacer(ch){
//}
var xmlEntry = {
    "'":"&amp;#39;",
    '"':'&amp;#34;',
    '&lt;':'&amp;lt;',
    '&gt;':'&amp;gt;',
    '&amp;':'&amp;amp;'
}</entry>
<entry key='com/baidu/webim/util/tween.js'>/*
 * 标准转换函数
 * 任意函数x坐标输入为0-1。也只考虑这段图形。
 * 输入前更具需要线型转换城区间内数据。
 * 如[100-5000]  我们可以 
 * x/5000 《 [0.1-1]
 * x/5000-0.1 《 [0-0.9]
 * (x-100)/4900《[0-1]
 */

/**
 * 曲线函数聚合
 */
function Tween(second,transform,interval){
    if(second){
        this.time = parseInt(second*1000);
    }
    if(transform){
        this.transform = transform;
    }
    if(interval){
        this.interval = interval;
    }
}

Tween.prototype = {
    interval:40,
    transform:function(x){return x},
    time:2000,
    moveBy : function(el,offsetX,offsetY,onFinish){
        var x = el.offsetLeft;//+margin
        var y = el.offsetTop;//+margin
        var style = el.style;
        //var oldStyle = [style.position,style.left,style.top];
        style.position = 'absolute';
        function onStep(rate){
            style.left = parseInt(x+rate*offsetX)+'px';
            style.top = parseInt(y+rate*offsetY)+'px';
        }
        function onComplete(){
            el =style=null;
            onFinish &amp;&amp; onFinish()
            //
        }
        return this.start(onStep,onComplete);
    },
    moveTo : function(el,x,y,onFinish){
        var ox = el.offsetLeft;//+margin
        var oy = el.offsetTop;//+margin
        return this.moveBy(el,x-ox,y-oy,onFinish);
    },
    opacity : function(el,begin,end,onFinish){
        el = R(el);
        var inc = end - begin;
        var first = true;
        function onStep(rate){
             el.setOpacity(begin + inc*rate);
             if(first){
                 first = false;
                 el.show('block');
             }
        }
        function onComplete(){
            if(!end){
                el.hide();
            }
            if(end == 0){
                el.hide();
            }
            el =null;
            onFinish &amp;&amp; onFinish()
        }
        
        var task = this.start(onStep,onComplete);
        return task;
    },
    start : function(onStep,onComplete){
        var interval = this.interval;
        var time = this.time;
        var transform = this.transform;
        var end = transform(1);
        var t = 0;
        function callback(){
            t+=interval;
            var x = t/time;
            if(x&gt;=1){
                onStep(1);
                onComplete();
                clearInterval(task);
            }else{
                onStep(transform(x)/end);
            }
        }
        var task = setInterval(callback,interval);
        return task;
    }
}

</entry>
<entry key='com/baidu/webim/ui/tab-folder.js'>/*
 * WEBIM UI TAB 管理脚本
 */

/**
 * tab 标签容器ID
 * @private
 */
var TAB_FOLDER_ID = "tabs";
/**
 * 新标签页默认HTML
 */
var NEW_TAB = '&lt;div class="tab-l"&gt;&lt;/div&gt;&lt;div class="tab-c"&gt;&lt;div&gt;创建新会话&lt;/div&gt;&lt;div title="关闭" class="tab-x"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="tab-r"&gt;&lt;/div&gt;';


/**
 * 负责页头标签显示及更新（如在线、忙碌标志）
 * @author jindw#xidea.org
 */
var UserTabFolder = {
    /**
     * 当前打开对象的集合
     * @owner UserTabFolder
     */
    openedTabs: {},
    /**
     * 初始化用户页头管理器
     * @owner UserTabFolder
     */
    initialize: function(){
        var tabFolderDiv = R(TAB_FOLDER_ID);
        //清空文本节点
        tabFolderDiv.clear();
        //事件函数赋值
        buildAddHandle(tabFolderDiv.lastChild);
    },
    /**
     * 添加一个空Tab页
     * @owner UserTabFolder
     * @return 未填充的回话标签序号
     */
    addTab: function (selected) {
        var index = tabFolderDataModel.length-1;
        var tabItem = tabFolderDataModel[index];
        
        //判断是否已经存在空标签
        //不存在空标签时创建
        if(!tabItem || tabItem.data){
            //构建新的tab
            var tabContainer = R(TAB_FOLDER_ID);
            var tabElement = new Element("div");
            tabElement.innerHTML = NEW_TAB;
            tabElement.className = "tab-i";
            tabContainer.insertBefore(tabElement, tabContainer.lastChild);
            
            var tabItem = new TabItem();
            tabItem.index = ++index;
            tabFolderDataModel.push(tabItem);
            if (selected) {
                tabItem.select();
            }
            UserTabMoveHandle.fixAdd();
            buildTabHandle(tabItem, tabElement);
        }
        return index;
    },
    setBlock:function(block){
        tabFolderDataModel[selectedIndex].block = block;
        MaskManager.disableTab(block);
    },
    /**
     * 添加一个新的聊友标签（id相同则不返回）
     * @owner UserTabFolder
     * @return 对应标签序号
     */
    addUser: function(user, selected){
        var index = tabFolderDataModel.length;
        var id = user.id;
        window.focus();
        //判断是否已经存在该用户的标签
        while(index--){
            if(tabFolderDataModel[index].id == id){
                selected &amp;&amp; tabFolderDataModel[index].select();
                return index;
            }
        }
        
        //从用户container中选择用户
        if(!user.name){
            var list = SharedData.contacts;
            var backUser = list &amp;&amp; list[id];
            if(backUser){
                user = backUser;
            }else{
                //TODO load Task
                user.name = id;
            }
        }
        
        //新增加tab
        var index = this.addTab();
        var item = tabFolderDataModel[index];
        item.setUser(user);
        //改变数据后需要重新选中
        if(index == selectedIndex){
            selected = true;
        }
        
        //构造标签内容
        var content = getContentDivByIndex(index);
        content.className = "tab-s" + (user.status || 0);
        content.innerHTML = ellipseString(user.name, 6);
        content.title = user.name;
        this.openedTabs[id] = true;
        
        //选择当前标签
        if(selected){
            item.select();
        }
        
        //隐藏添加用户表单域
        UserSelector.hide();
        return index;
    },
    
    /**
     * 添加一条新的聊天记录并显示必要的闪烁提示
     * @owner UserTabFolder
     */
    addMessage : function(key,from,content,style,time){
        var index = this.addUser({id:key});
        var tabInfo = tabFolderDataModel[index];
        if(selectedIndex != index){
            tabInfo.newsCount ++;
            buildNotifyInterval();
        }
        UserContent.addMessage(key,from,content,style,time);
    },
    /**
     * 状态变化时图标更改，由server-side调用
     * @owner UserTabFolder
     */
     setStatus: function (id, content) {
        var len = tabFolderDataModel.length;
        
        while(len--){
            if(tabFolderDataModel[len].id == id){
                var contentDiv = getContentDivByIndex(len);
                contentDiv.className = "tab-s" + (content.status || 0);
                return len;
            }
        }
     }
};

/**
 * tab 数据模型
 * @private
 */
var tabFolderDataModel = [];

/**
 * 当前选择索引
 */
var selectedIndex = -1;


/**
 * 通知闪烁间隔器
 */
var notifyInterval;

/**
 * 通过指定序号获取内容DIV
 */
function getContentDivByIndex(index){
    return R(TAB_FOLDER_ID).childNodes[index].firstChild.nextSibling.firstChild;
}
/**
 * 通过指定元素获取管局句柄DIV
 */
function getCloseDivByTabDiv(tabDiv){
    return tabDiv.firstChild.nextSibling.lastChild;
}
function buildTabHandle(tabItem,node){
    node.onclick= function(){
        tabItem.select();
    };
    getCloseDivByTabDiv(node).onclick = function(){
        tabItem.remove();
    };
    node.onmouseover= function(){
        this.className = this.className.replace(/o?$/,'o');
    };
    node.onmouseout=function(){
        this.className = this.className.replace(/o$/,'');
    };
    node = null;
}
function buildAddHandle(node){
    node.onmouseover = function(){
        this.backgroundPosition = "0 22"
    }
    node.onmouseout = function(){
        this.backgroundPosition = "0 0"
    }
    node.onclick = function(){
        UserSelector.show();
    }
    node = null;
}


function TabItem(userData){
    this.newsCount = 0;
    this.setUser(userData);
}
TabItem.prototype = {
    /**
     * 设置当前TabItem对应的用户信息
     */
    setUser:function(userData){
        if(this.data = userData){
            this.id=userData.id;
            this.name=userData.name;
        }
    },
    
    /**
     * 响应用户移除事件
     */
    remove:function(){
        var thisIndex = this.index;
        var tabs = R(TAB_FOLDER_ID);
        //清除tab和usercontent的div和数据
        tabFolderDataModel.splice(thisIndex,1);
        tabs.removeChild(tabs.childNodes[thisIndex]);
        UserContent.remove(this.id);
        
        //重新计算现有tab的索引
        var index = tabFolderDataModel.length;
        while (index&gt;thisIndex) {
            tabFolderDataModel[--index].index--;
        }
        if (this.id) {
            delete UserTabFolder.openedTabs[this.id];
        } else {
            UserSelector.hide();
        }
        UserTabMoveHandle.fixTab();
        UserTabMoveHandle.fixAdd();
        //先选择下一个Tab
        if(thisIndex == selectedIndex){
            var nextIndex = thisIndex;
            if(nextIndex&gt;=tabFolderDataModel.length){//==即可
                nextIndex--;
            }
            if(nextIndex&gt;=0){
                tabFolderDataModel[nextIndex].select();
            }else{
                //无标签时新建添加联系人标签
                UserSelector.show();
            }
        }else if(thisIndex &lt; selectedIndex){
            selectedIndex--; 
        }
    },

    /**
     * 响应用户选择事件
     */
    select:function(){
        if (this.id) {
            //判断是否存在空标签页
            //存在空标签页则删除该空标签
            var index = tabFolderDataModel.length-1;
            var tabItem = tabFolderDataModel[index];
            if(tabItem != this &amp;&amp; tabItem &amp;&amp; (!tabItem.data)){
                tabItem.remove();
                UserSelector.hide();
            }
            
            this.newsCount = 0;
            UserContent.show(this.id);
        }
        setSelectedIndex(this.index);
        var tabs = R(TAB_FOLDER_ID);
        UserTabMoveHandle.showTab(selectedIndex);
        SideInfo.show(SharedData.remoteId = this.data &amp;&amp; this.data.id);
        //IE Layout Bug
        setTimeout(updateSendEnabled,1);
    }
}
function setSelectedIndex (idx) {
    var len = tabFolderDataModel.length;
    if (idx &lt; 0 || idx &gt;= len) {
        return;
    }
    
    var nodes = R(TAB_FOLDER_ID).childNodes;
    if (selectedIndex &gt;= 0) {
        nodes[selectedIndex].className = 'tab-i';
    }
    nodes[idx].className = 'tab-a';
    selectedIndex = idx;
    UserTabFolder.setBlock(tabFolderDataModel[idx].block);//另选中标签可见
}
function updateSendEnabled(){
    Editor.setEnabled(SharedData.remoteId);
}
/**
 * @param index 
 * @param oldClass 变量申明，非参数
 * @param flag 变量申明，非参数
 */
function buildNotifyInterval(flag){
    focus();
    notifyInterval = notifyInterval || setInterval(function(){
        var tabs = R(TAB_FOLDER_ID).childNodes;
        var index = tabFolderDataModel.length;
        var noNews = true;
        while(index--){
            if(index != selectedIndex &amp;&amp; tabFolderDataModel[index].newsCount){
                var tab = tabs[index];
                var offsetLeft = tab.offsetLeft + tab.parentNode.offsetLeft;
                var clientWidth = tab.clientWidth;
                var containerWidth = tab.parentNode.clientWidth;
                var isRight;
                tab.className = (flag = !flag)?'tab-n':'tab-i';
                if(clientWidth+offsetLeft&lt;10){
                    isRight = false;
                }else if(offsetLeft - containerWidth &gt;0){
                    isRight = true;
                }
                if(isRight!=null){
                    UserTabMoveHandle.showAlert(isRight,flag);
                }
                noNews = false;
            }

        }
        if(noNews){
            clearInterval(notifyInterval);
            notifyInterval = null;
        }
    },500);
}


</entry>
<entry key='com/baidu/webim/ui/__package__.js'>this.addScript('uiconnector.js','UIConnector',
                ['*','com.baidu.webim.XHRConnector']);
this.addScript('tab-folder.js',"UserTabFolder");
this.addScript('tab-content.js',"UserContent");

this.addScript('move-handle.js',"UserTabMoveHandle");
this.addScript('editor.js',['Editor','EDITOR_FRAME_ID','TextMessage'],
                'FontManager');
this.addScript('editor-bar.js',['EditorBar','updateFaceButton']);
this.addScript('face-manager.js',['FaceManager']);
this.addScript('layout.js','Layout');
this.addScript('mask-manager.js',['MaskManager']);
this.addScript('login-manager.js',['LoginManager','LoginMessage']);
this.addScript('user-selector.js','UserSelector');
this.addScript('font-manager.js',['FontManager']);
this.addScript('info-manager.js',['InfoManager']);

this.addScript('side-info.js',['SideInfo']);

this.addDependence('*','com.baidu.webim.SharedData',true);
this.addDependence('*','com.baidu.webim.util.*',false);
this.addDependence('*','com.baidu.webim.Controller',false);
this.addDependence('*','com.baidu.webim.message.ClientSideMessage',false);


this.addDependence('*','*',true);</entry>
<entry key='com/baidu/webim/ui/tab-content.js'>
/**
 * tab 内容容器ID
 * @private
 */
var CONTENT_ID ="output";

/**
 * 用户聊天内容管理器
 * @author jindw#xidea.org
 */
var UserContent = {
    /**
     * 初始化用户聊天内容管理器
     * @owner UserContent
     * @for UserTabFolder
     * @friendly 
     */
    initialize: function(){
        R(CONTENT_ID).clear();
    },
    /**
     * 在TabFolder内容区添加一条新的聊天记录
     * @owner UserContent
     * @for UserTabFolder
     * @friendly 
     */
    addMessage : function(key,from,content,style,time){
        var block = new Element('div');
        var hours = time.getHours();
        var minutes = time.getMinutes();
        if(hours&lt;10){
            hours = '0'+10;
        }
        if(minutes&lt;10){
            minutes = '0'+10;
        }
        block.innerHTML = ["&lt;div class='msg-info'&gt;",from , "  ",hours,':', minutes,
                           "&lt;/div&gt;&lt;div class='msg-content' style='",style||"","'&gt;",content,
                           "&lt;/div&gt;"].join('');
        requireContentDiv(key).appendChild(block);
        //这一段应该是不需要的，没时间测试，先保留
        if(previousUsername == key){
            UserContent.show(key);
        }
        block.scrollIntoView();
    },
    /**
     * 控制对应ContentItem的显示
     * @owner UserTabFolder
     * @for UserTabFolder
     * @friendly 
     */
    show: function (username) {
        username = username || '';
        var i = userlist.length;
        while(i--){
            if(userlist[i]==username){
                var blockDiv = findContentDivByIndex(i);
                if(blockDiv){
                   blockDiv.style.display='block';
                }
            }else if(userlist[i]==previousUsername){
                var blockDiv = findContentDivByIndex(i);
                if(blockDiv){
                    blockDiv.style.display='none';
                }
            }
        }
        previousUsername = username;
    },
    /**
     * 在TabFolder内容区删除一个区块
     * @owner UserContent
     * @for UserTabFolder
     * @friendly 
     */
    remove:function(username){
        var i = userlist.length;
        while(i--){
            if(userlist[i]==username){
                var div = findContentDivByIndex(i);
                userlist.splice(i,1);
                div.parentNode.removeChild(div);
                break;
            }
        }
    }
};
var previousUsername = null;
function findContentDivByIndex(i){
    return R(CONTENT_ID).childNodes[i+1];
}
function requireContentDiv(username){
    var i = userlist.length;
    while(i--){
        if(userlist[i]==username){
            return R(CONTENT_ID).childNodes[i+1];
        }
    }
    userlist.push(username);
    var div = new Element('div');
    if(previousUsername != username){
        div.hide();
    }
    R(CONTENT_ID).appendChild(div);
    return div;
}
var userlist = [];</entry>
<entry key='com/baidu/webim/ui/move-handle.js'>var TAB_FOLDER_ID = "tabs";
var MOVE_HANDLE_ID = "more";


var LEFT_PADDING = 5;
var RIGHT_PADDING = 64;
//var RIGHT_PADDING = 37+26+1;

/**
 * WEBIM UI TAB 移动支持脚本
 */
var UserTabMoveHandle  = {
    /**
     * 初始化
     * @owner UserTabMoveHandle
     * @public
     */
    initialize:function(){
        var ns = R(MOVE_HANDLE_ID).clear().childNodes;
        buildMoveHandle(ns[0],false);
        buildMoveHandle(ns[1],true);
        ns = null;
    },
    /**
     * 移动页头标签
     * @owner UserTabMoveHandle
     * @public
     */
    move:function(isRight){
        var tabsNode = R(TAB_FOLDER_ID);
        var outerLeft = tabsNode.offsetLeft;
        var nodes = tabsNode.childNodes;
        var l = nodes.length;
        if(isRight){//右边点击，左移，令右可见
            var width = tabsNode.parentNode.clientWidth - RIGHT_PADDING;
            var previousNode;
            l--;
            while(l--){
                var itemNode = nodes[l];
                var marginRight = width - outerLeft - itemNode.offsetLeft - itemNode.clientWidth;
                //左移，marginRight ＋＋
                if(marginRight &gt; 0){//找第一个未越界元素
                    //previousNode@marginRight&lt;0
                    if(previousNode){//如果最末一个就未越界，那么其他也就不会越界了
                        //if(marginRight&lt;itemNode.clientWidth){//原本相差太远，可跳跃两个tab
                        if(previousNode.nextSibling &amp;&amp; previousNode.nextSibling.nextSibling){
                            previousNode = previousNode.nextSibling
                        }
                        //}
                        var left = width-previousNode.offsetLeft-previousNode.clientWidth ;
                        moveTo(left);
                    }
                    break;
                }
                previousNode = itemNode;
            }
        }else{//左边点击，右移，令左可见
            while(l--){
                var itemNode = nodes[l];
                var left = outerLeft+itemNode.offsetLeft;
                if(left&lt;LEFT_PADDING){
                    if(left&gt;LEFT_PADDING - itemNode.clientWidth){//原本相差太远，可跳跃两个tab
                        itemNode = itemNode.previousSibling || itemNode;
                    }
                    left = LEFT_PADDING-itemNode.offsetLeft
                    moveTo(left);
                    break;
                }
            }
        }
        if(itemNode){
            setBackgroundPosition(itemNode,0);
        }
    },
    /**
     * 移除标签时用于将显示区域之外的标签移出来
     * @owner UserTabMoveHandle
     * @public
     */
    showTab:function(index){
        var tabsNode = R(TAB_FOLDER_ID);
        var itemNode = tabsNode.childNodes[index];
        var outerLeft = tabsNode.offsetLeft;
        var innerLeft = itemNode.offsetLeft;
        var width = tabsNode.parentNode.clientWidth - RIGHT_PADDING;
        var left = outerLeft + innerLeft;
        if(left&lt;0){
            moveTo(LEFT_PADDING-innerLeft);
        }else if(left+itemNode.clientWidth&gt;width){
            moveTo(width-innerLeft-itemNode.clientWidth);
        }
        
    },
    /**
     * 重设Tab添加按钮的位置
     * @owner UserTabMoveHandle
     * @public
     */
    fixAdd:function(){
        var tabsNode = R(TAB_FOLDER_ID);
        var addNode = tabsNode.lastChild;
        var lastTabNode = addNode.previousSibling;
        if(lastTabNode){
            var endOffset = tabsNode.offsetLeft + lastTabNode.offsetLeft + lastTabNode.clientWidth;
            var width = tabsNode.parentNode.clientWidth - RIGHT_PADDING;
            if(endOffset &lt; width){
                addNode.style.position = 'static';
            }else{
                addNode.style.position = 'absolute';
                addNode.style.left = width - tabsNode.offsetLeft + 'px';
            }
        }
        
    },
    /**
     * 移除标签时用于将显示区域之外的标签移出来
     * //TODO:有待优化，这里的实现很全面，但因为我们tab长度相对固定。
     * @owner UserTabMoveHandle
     * @public
     */
    fixTab: function () {
        var totalWidth = document.body.clientWidth;
        var tabsNode = R(TAB_FOLDER_ID);
        var left = tabsNode.offsetLeft;
        var lastTab = tabsNode.lastChild.previousSibling;
        
        if(lastTab){
            var offset = Math.min(LEFT_PADDING,
                  totalWidth - RIGHT_PADDING - lastTab.offsetLeft - lastTab.offsetWidth);
            if (offset &gt; left) {
                moveTo(offset);
            }
        }
        
//        var lastTabMove = totalWidth - RIGHT_PADDING - (lastTab.offsetLeft + left + lastTab.offsetWidth);
//        if (left &lt; LEFT_PADDING &amp;&amp; lastTabMove &gt; 0) {
//          alert(offset == (left - Math.max(left - LEFT_PADDING, 0-lastTabMove)));
//        }
    },
    /**
     * 在移动句柄上显示有消息到达闪烁
     * @owner UserTabMoveHandle
     * @public
     */
    showAlert:function(isRight,isAlert){
        var node = R(MOVE_HANDLE_ID).childNodes[isRight?1:0];
        setBackgroundPosition(node,isAlert?-44:0);
    }
}

/**
 * 用于tab移动
 * @param position2:TAB_FOLDER_ID元素移动后的offsetLeft
 */
function moveTo(position2){
    var tabsNode = R(TAB_FOLDER_ID);
    var addNode = tabsNode.lastChild;
    var lastTabNode = addNode.previousSibling;
    //浮动是positionx
    var floatX = lastTabNode.offsetLeft + lastTabNode.clientWidth;
    //初始 容器偏移量
    var position1 = tabsNode.offsetLeft;
    //容器总偏移量
    var offsetX = position2 - position1
    var width = tabsNode.parentNode.clientWidth - RIGHT_PADDING;
    function onStep(rate){
        tabsNode.style.left = (position2 = parseInt(position1+rate*offsetX))+'px';
        addNode.style.position = 'absolute';
        addNode.style.left = Math.min(width - position2,floatX) + 'px';
    }
    function onComplete(){
        UserTabMoveHandle.fixAdd();
        //GC:
        tabsNode = addNode = lastTabNode = null;
    }
    tween.start(onStep,onComplete);
}
var exponent=3;
var rate = 1/Math.pow(0.5,exponent-1);
function easeBothStrong(x){
    if(x&gt;0.5){
        return 1-rate* Math.pow(1-x,exponent);
    }else{
        return Math.pow(x,exponent)*rate;
    }
    //return (x*=2)
}
var tween = new Tween(0.5,easeBothStrong);
function buildMoveHandle(node,isRight){
    node.style.backgroundPosition = isRight?"right 0px":"0 0px";
    node.onclick = function(){
        UserTabMoveHandle.move(isRight);
    }
    node.onmouseover = function(){
        setBackgroundPosition(this,-22);
    }
    node.onmouseout = function(){
        setBackgroundPosition(this,0);
    }
    node = null;
}
function setBackgroundPosition(node,y){
    node.style.backgroundPosition = node.style.backgroundPosition.replace(/\d+px$/,y+'px');
}</entry>
<entry key='com/baidu/webim/ui/font-manager.js'>var FONT_BOLD_ID = 'fontBold';
var FONT_ITALIC_ID = 'fontItalic';
var FONT_UNDERLINE_ID = 'fontUnderline';
var FONT_COLOR_ID = 'fontColor';
var FONT_SIZE_ID = 'fontSize';
var FONT_FAMILY_ID = 'fontFamily';
var FONT_BAR_ID = 'fontBar';
var FONT_BUTTON_ID = 'fontButton';

var FONT_COLOR_ITEM_CLASS = 'color-block';

/**
 * 颜色选取相关的具名常量
 */
var COLOR_LIST = ['#8c0000',
                    '#fe0000',
                    '#fea500',
                    '#ffffff',
                    '#feff00',
                    '#8fee90',
                    '#008001',
                    '#707070',
                    '#aed8e6',
                    '#00018a',
                    '#81007f',
                    '#000000',
                    '#aed8e6',
                    '#00018a',
                    '#81007f',
                    '#000000'];
var COLOR_DIALOG_ID = 'colorDialog';
var COLOR_MAP_ID = 'colorMap';
var COLOR_TEMPLATE = '&lt;div class="color-block" style="background:%1;color:%1"&gt;%1&lt;/div&gt;';

/**
 * 对话框状态
 */
var active;
/**
 * 聊天字体状态字
 */
var fontBold;
var fontItalic;
var fontUnderline;

/**
 * 初始化编辑器字体调整功能
 */
var FontManager ={
    initialize : function() {
        R(FONT_BUTTON_ID).onclick = fontClick;
        var boldElement = R(FONT_BOLD_ID);
        var italicElement = R(FONT_ITALIC_ID);
        var underlineElement = R(FONT_UNDERLINE_ID);
        var colorElement = R(FONT_COLOR_ID);
        var colorHtmlBuffer = [];
        var colorMap = R(COLOR_MAP_ID);
        for (var i = 0, l = COLOR_LIST.length; i &lt; l; i++) {
            colorHtmlBuffer.push(buildColor(COLOR_LIST[i]));
        }
        //这三个函数this不敏感，所以直接赋值
        boldElement.onclick = this.clickBold;
        italicElement.onclick = this.clickItalic;
        underlineElement.onclick = this.clickUnderline;
        
        colorElement.onclick = clickColor;
        
        boldElement.onmouseover = overBold;
        italicElement.onmouseover = overItalic;
        underlineElement.onmouseover = overUnderline;
        colorElement.onmouseover = overColor;
        
        boldElement.onmouseout = updateBold;
        italicElement.onmouseout = updateItalic;
        underlineElement.onmouseout = updateUnderline;
        colorElement.onmouseout = updateColor;
        
        R(FONT_SIZE_ID).onchange = fontSizeChanged;
        R(FONT_FAMILY_ID).onchange = fontFamilyChanged; 
        
        colorMap.innerHTML = colorHtmlBuffer.join('');
        colorMap.onclick = fontColorClick;
        colorMap.onmouseover = fontColorOver;
        colorMap.onmouseout = fontColorOut;
        addEventObserver(document,'click',closeColorDialogListener);
    },
    isActive:function(){
        return active;
    },
    //子按钮点击事件
    clickBold : function() {
        setStyle('fontWeight',
                        (fontBold = !fontBold)? 'bold':'normal');
        updateBold();
    },
    clickItalic : function(){
        setStyle('fontStyle',
                            (fontItalic = !fontItalic)? 'italic':'normal');
        updateItalic();
    },
    clickUnderline : function() {    
        setStyle('textDecoration',
                       (fontUnderline = !fontUnderline )? 'underline' : 'none');
        updateUnderline();
    },
    getStyles: function () {
        var buf = [];
        for(var n in styleObject){
            buf.push(n.replace(/[A-Z]/,toCSSStyleReplacer),':',styleObject[n],';');
        }
        return buf.join('');
    }
}
var colorActive;
var styleObject = {};
var tween = new Tween(0.2);
var tweenInterval;
function toCSSStyleReplacer(ch){
    return '-'+ch.toLowerCase();
}
function setStyle(key,value) {
    var contentBody = R(EDITOR_FRAME_ID).contentWindow.document.body;
    styleObject[key] = contentBody.style[key] = value;
}
function fontClick(){
    var style = R(FONT_BAR_ID).style;
    style.display = (active = !active)? 'block' : 'none';
    Layout.update();
}
/**
 * 点击页面其他地方时关闭颜色面板
 */
function closeColorDialogListener(event){
    if(colorActive){
        var event = event || window.event;
        var target = event.srcElement || event.target;
        while(target){
            if (target.id &amp;&amp; 
                (target.id == COLOR_DIALOG_ID || target.id == FONT_COLOR_ID)) {
                return true;
            }
            target = target.parentNode;
        }
        //R(COLOR_DIALOG_ID).hide();
        clickColor();
        updateColor();
    }
}

function clickColor() {
    colorActive = !colorActive;
    var dialog =  R(COLOR_DIALOG_ID);
    if(tweenInterval){
        clearInterval(tweenInterval);
    }
    if(colorActive){
        tweenInterval = tween.opacity(dialog,0,1,onTweenComplete);
    }else{
        tweenInterval = tween.opacity(dialog,1,0,onTweenComplete);
    }
}
function onTweenComplete(){
    tweenInterval = null;
}
function fontSizeChanged() {
    var option = this.options[this.selectedIndex];
    setStyle('fontSize',
                    (option.value || option.text) + 'pt');
}
function fontFamilyChanged() {
    var option = this.options[this.selectedIndex];
    setStyle('fontFamily',
                    option.value || option.text);
}
//子按钮状态更新事件
function updateBold (){
    R(FONT_BOLD_ID).style.backgroundPosition = fontBold ? "0 20px" : "0 0";
}
function updateItalic (){
    R(FONT_ITALIC_ID).style.backgroundPosition = fontItalic ? "60px 20px" : "60px 0";
}
function updateUnderline (){
    R(FONT_UNDERLINE_ID).style.backgroundPosition = fontUnderline ? "40px 20px" : "40px 0";
}
function updateColor (){
    R(FONT_COLOR_ID).style.backgroundPosition = colorActive ? "20px 20px" : "20px 0";
}
//子按钮鼠标移入事件
function overBold (){
    R(FONT_BOLD_ID).style.backgroundPosition = "0 40px";
}
function overItalic (){
    R(FONT_ITALIC_ID).style.backgroundPosition = "60px 40px";
}
function overUnderline (){
    R(FONT_UNDERLINE_ID).style.backgroundPosition = "40px 40px";
}
function overColor (){
    R(FONT_COLOR_ID).style.backgroundPosition = "20px 40px";
}


//颜色子对话筐
/**
 * 设置编辑器文字颜色
 */
function fontColorClick (event) {
    var event = event || window.event;
    var el = event.srcElement || event.target;
    if (el.className == FONT_COLOR_ITEM_CLASS) {
        setStyle('color', el.innerHTML);
        //R(COLOR_DIALOG_ID).hide();
        clickColor();
        updateColor();
    }
}
function fontColorOver (event) {
    var event = event || window.event;
    var el = event.srcElement || event.target;
    if (el.className == FONT_COLOR_ITEM_CLASS) {
        el.style.border = '1px solid #8aa6da';
    }
}
function fontColorOut (event) {
    var event = event || window.event;
    var el = event.srcElement || event.target;
    if (el.className == FONT_COLOR_ITEM_CLASS) {
        el.style.border = '1px solid #5f6d88';
    }
}
function buildColor (color) {
    return COLOR_TEMPLATE.replace(/%1/g, color);
}</entry>
<entry key='com/baidu/webim/ui/editor.js'>/**
 * 
 */
var EDITOR_FRAME_ID= "editorFrame";
var EDITOR_SEND_ID= "send";
var EDITOR_CONTENT = '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;&lt;html&gt;&lt;head&gt;&lt;style&gt;.face{background:url(img/face.gif);width:0px;padding-left:19px;height:19px;font-size:18px;}html,body{padding:0px;margin:0px;height:100%;width:100%;word-wrap:break-word;font-size:12px;}&lt;/style&gt;&lt;/head&gt;&lt;body oncontextmenu="return false;"&gt;&lt;/body&gt;&lt;/html&gt;';

/**
 * @impliments 在Editor.initialize 中实例化
 */
var isIE;

var ieSelectionBookmark;
/**
 * 编辑器UI组件
 */
var Editor = {
    /**
     * 初始化编辑器信息
     * @owner Layout
     */
    initialize:function(){
        var editorFrame = R(EDITOR_FRAME_ID);
        var sendButton = R(EDITOR_SEND_ID);
        var contentWindow = editorFrame.contentWindow;
        var contentDocument = contentWindow.document;
        contentDocument.open();
        contentDocument.write(EDITOR_CONTENT);
        contentDocument.close();
        contentDocument.designMode='on';
        if(contentDocument.addEventListener){//FF 不能直接赋值
            contentWindow.addEventListener('keydown',keyFilter,false);
            contentWindow.addEventListener('keyup',keyListener,false);
            contentDocument.addEventListener('contextmenu', openContextMenu, false);
        }else{
            isIE = true;
            contentDocument.onkeydown = keyFilter;
            contentDocument.onkeyup = keyListener;
            contentDocument.oncontextmenu = openContextMenu;
            
            contentDocument.oncontrolselect = returnFalse;
            contentDocument.onbeforedeactivate = markIESelection;
            contentDocument.onactivate = restoreIESelection;
        }
        document.onkeydown = outerKeyFilter;
        sendButton.onclick = sendListener;
    },
    getContent:function(){
        var html = R(EDITOR_FRAME_ID).contentWindow.document.body.innerHTML;
        return FaceManager.toText(html);
    },
    setContent:function(content){
        R(EDITOR_FRAME_ID).contentWindow.document.body.innerHTML =  FaceManager.toHTML(content);
    },
    setEnabled:function(enabled){
        R(EDITOR_SEND_ID).disabled = !enabled;
    },
    pasteHTML:function(html){
        var contentWindow = R(EDITOR_FRAME_ID).contentWindow;
        var contentDocument = contentWindow.document;
        contentWindow.focus();
        if(isIE){
            var range = contentDocument.selection.createRange();
            range.select();
            html &amp;&amp; range.pasteHTML(html);
            //IE bug
            range.select();
        }else{
            //FF bug 不能在第一行插入
            
            if(html == '&lt;br&gt;'){
                contentDocument.execCommand('insertHTML',false,"&lt;br&gt;\x00")
//                var selection = contentWindow.getSelection();
//                var range =  selection.getRangeAt(0);
//                range.setStart(range.startContainer,0);
//                range.deleteContents();
//                //alert(contentDocument.body.innerHTML)
//                contentWindow.focus();
            }else if(html){
                contentDocument.execCommand('insertHTML',false,html)
            }
        }
    }
}
/**
 * 控制行为的拦截
 */
var ctrlActionMap = {
    V:function(){
        if(window.clipboardData){
            Editor.pasteHTML(clipboardData.getData("text").replace(/[&lt;&gt;&amp;]/g,toXmlEntryReplacer));
        }else{//for firefox
            pasteFix();
            return true;
        }
    },
    '\x0d':function(){
        sendListener();
    },
    //这三个函数一定要this不敏感
    I:FontManager.clickItalic,
    B:FontManager.clickBold,
    U:FontManager.clickUnderline
}
var allowedDefaults = ['A','X','C',' '];
var i = allowedDefaults.length;
while(i--){
    ctrlActionMap[allowedDefaults[i]] = returnTrue;
}

/**
 * 用于编辑器黏贴html的过滤
 */
function pasteFix(){
    var fixer = R('pasteFixer');
    fixer.style.display = 'block';
    fixer.focus();
    fixer.select();
    setTimeout(pasteFixTask,10)

}
function pasteFixTask(){
    var fixer = R('pasteFixer');
    fixer.style.display = 'none';
    Editor.pasteHTML(FaceManager.toHTML(fixer.value.replace(/[&lt;&gt;&amp;]/g,toXmlEntryReplacer)));
}
/**
 * 显示右键菜单
 */
function openContextMenu(event) {
    if(event){
        event.preventDefault();
    }else{
        event = window.event;
    }
    InfoManager.show("右键菜单尚未实现，请使用ctrl + C,ctrl+V 实现拷贝粘贴");
    return false;
}
var x = 0;
/**
 * 按键过滤器。
 * 包括控制键行为变更。回车处理
 */
 
var firstEnterPress = true;
function outerKeyFilter(event){
    if(isIE){
        event = window.event;
    }
    var keyCode = event.which || event.keyCode;
    //window.document.title = (i++) +'&amp;'+(keyCode)
    if(event.ctrlKey){
         R(EDITOR_FRAME_ID).contentWindow.focus();
    }
}
function keyFilter(event){
    var contentWindow = R(EDITOR_FRAME_ID).contentWindow;
    if(isIE){
        event = contentWindow.event;
    }
    var keyCode = event.which || event.keyCode;
    //alert(keyCode)
    //window.document.title = (i++) +'&amp;'+(keyCode)
    if(event.ctrlKey &amp;&amp; keyCode!=17){
        var action = ctrlActionMap[String.fromCharCode(keyCode)];
        if(action  &amp;&amp; action()){
            return true;
        }
    }else if(keyCode == 13 &amp;&amp; !event.shiftKey) {
        if (firstEnterPress) {
            InfoManager.show('Ctrl+Enter发送消息');
            firstEnterPress = false;
        }
        Editor.pasteHTML("&lt;br&gt;");
    }else{
        return true;
    }
    isIE || event.preventDefault();
    return false;
}
function keyListener(event){
    var contentWindow = R(EDITOR_FRAME_ID).contentWindow;
    replaceFace(contentWindow);
};
function sendListener(){
    var remoteId = SharedData.remoteId
    var text = Editor.getContent();
    if(/^\s*$/.test(text)){
        InfoManager.show("不能发送空消息");
    }else{
        Controller.sendMessage(new TextMessage(remoteId,text,FontManager.getStyles()));
        Editor.setContent('');
        //IE 可能失去焦点
        R(EDITOR_FRAME_ID).contentWindow.focus();
    }
}

function replaceFace(contentWindow){
    var contentDocument = contentWindow.document;
    if(isIE){
        var selection = contentDocument.selection;
        var range = selection.createRange();
        range.moveStart("character",-3);
        range.moveEnd("character",3);
        var face = FaceManager.findFace(range.text);
        if(face){
            range.findText(face.text);
            range.select();
            range.pasteHTML(face.html);
        }
    }else{
        var selection = contentWindow.getSelection();
        var node =  selection.anchorNode
        if(node.nodeType != 3){
            return;
        }
        var text = node.nodeValue;
        var face = FaceManager.findFace(text);
        if(face){
            var range = contentDocument.createRange();
            var faceText = face.text;
            var index = text.indexOf(faceText);
            range.setStart(node, index);
            range.setEnd(node, index + faceText.length);
            range.deleteContents();
            contentDocument.execCommand('insertHTML',false,face.html);
        }
    }
}
/**
 * 记录IE的编辑选区
 */
function markIESelection() {
    var contentWindow = R(EDITOR_FRAME_ID).contentWindow;
    var range = contentWindow.document.selection.createRange();
    ieSelectionBookmark = range.getBookmark();
};
/**
 * 复位IE的编辑选区
 */
function restoreIESelection() {
    if(ieSelectionBookmark){
        var contentWindow = R(EDITOR_FRAME_ID).contentWindow;
        var range = contentWindow.document.body.createTextRange();
        range.moveToBookmark(ieSelectionBookmark);
        range.select();
        ieSelectionBookmark = null;
    }
}

/**
 * 聊天消息类
 * @author jindw#xidea.org
 */
function TextMessage(remoteId,text,param){
    this.to = remoteId;
    this.content = text;
    this.param = param;
}
TextMessage.prototype = new ClientSideMessage("message");
TextMessage.prototype.before = function(){
    UserTabFolder.addMessage(this.to,"我",FaceManager.toHTML(this.content),this.param,new Date());
}
TextMessage.prototype.after = function(msg){
    if(msg.type!='ok'){
        UserTabFolder.addMessage(this.to,"我","刚才的消息发送失败:&lt;br&gt;" + this.content,this.param,new Date());
    }
}

</entry>
<entry key='com/baidu/webim/ui/editor-bar.js'>/**
 * 
 */
var FACE_BUTTON_ID = 'faceButton';
var FONT_BUTTON_ID = 'fontButton';
var XY_BUTTON_ID = 'xyButton';
var HISTORY_BUTTON_ID = "historyButton";

var BUTTON_BORDER_NORMAL = '1px solid #F7F8FC';
var BUTTON_BORDER_ACTIVE = '1px solid #949EA7';
/**
 * 编辑器UI组件
 * 只负责Buttons的显示效果，其他交给其他对象处理
 */
var EditorBar = {
    /**
     * 初始化编辑器信息
     * @owner Layout
     */
    initialize:function(){
        var historyButton = R(HISTORY_BUTTON_ID);
        var fontButton = R(FONT_BUTTON_ID);
        var faceButton = R(FACE_BUTTON_ID);
        var xyButton = R(XY_BUTTON_ID);
        historyButton.clear().firstChild.onclick = historyClick;
        
        //fontButton.onclick = FontManager.click;
        //faceButton.onclick = FaceManager.click;
        xyButton.onclick = xyClick;
        
        fontButton.onmouseover = faceButton.onmouseover = xyButton.onmouseover = buttonMouseover;
        
        fontButton.onmouseout = updateFontButton;
        faceButton.onmouseout = updateFaceButton
        xyButton.onmouseout = buttonMouseout;
        
    }
}
function historyClick(){
    if(SharedData.remoteId){
        var href = "/message.action?remoteId=" + SharedData.remoteId;
        window.open(href,"message","width=1100,height=1000,resizable=1,scrollbars=1") ||
           (this.href = href)
    }else{
        InfoManager.show("请选择有效用户");
        return false;
    }
    
}
function xyClick(event){
    UserTabFolder.setBlock(true);
    //InfoManager.show('联系人阻止功能尚未实现');
}
function buttonMouseover(event){
    this.style.border=BUTTON_BORDER_ACTIVE;
}
function buttonMouseout(event){
    this.style.border=BUTTON_BORDER_NORMAL;
}

function updateFontButton () {
    var fontShow = FontManager.isActive();
    R(FONT_BUTTON_ID).style.border = fontShow ? BUTTON_BORDER_ACTIVE : BUTTON_BORDER_NORMAL;
}
function updateFaceButton () {
    var faceShow = FaceManager.isActive();
    R(FACE_BUTTON_ID).style.border = faceShow ? BUTTON_BORDER_ACTIVE : BUTTON_BORDER_NORMAL;
}</entry>
<entry key='com/baidu/webim/ui/face-manager.js'>/**
 * 表情管理，显得复杂了，应该考虑吧计算逻辑和UI处理分开。
 */
var FACE_BUTTON_ID = 'faceButton';
var FACE_DIALOG_ID = 'faceDialog';
/**
 * 临时策略，以后select都将自行模拟，不存在select问题
 */
var FACE_PAD_ID = 'faceDialogPad';
var FACE_CONTAINER_ID = 'faceMap';
var FACE_LIST = ":),:D,;),:-O,:P,(H),:@,:S,:$,:(,:'(,:|,(A),8o|,8-|,+o(,&lt;:o),|-),*-),:-#,:-*,^o),8-),(L),(U),(M),(@),(&amp;),(sn),(bah),(S),(*),(#),(R),({),(}),(K),(F),(W),(O)".split(',');
var ALPHA_ALIAS = {
    ':':'：',
    '(':'（',
    ')':'）'
    };
var faceTemplate = "&lt;img class='face' title=\"%1\" style='background-position:-%2px 0'/&gt;"
/*
 * 数据加工
 */
var aliasAlphaMap = {};
var faceAlphaMap = {};
var facePositionMap = {};
var toHTMLRegexp = [];
var i = FACE_LIST.length;
var specialChars = "$()*+.[?\^{|/";
for(var n in ALPHA_ALIAS){
    var alias = ALPHA_ALIAS[n];
    var rexexpSource = specialChars.indexOf(n)&gt;=0? "\\" + n : n;
    aliasAlphaMap[alias] = rexexpSource;
    faceAlphaMap[alias] = faceAlphaMap[n] == "(?:" + rexexpSource + '|' + alias +")";
}
while(i--){
    toHTMLRegexp.push('(?:');
    var item = FACE_LIST[i];
    for(var j = 0;j&lt;item.length;j++){
        var character = item.charAt(j);
        var rexexpSource = faceAlphaMap[character];
        if(!rexexpSource){
            faceAlphaMap[character] = rexexpSource = specialChars.indexOf(character)&gt;=0? "\\" + character : character;
        }
        toHTMLRegexp.push(rexexpSource);
    }
    facePositionMap[item] = 19*i;
    toHTMLRegexp.push(')');
    if(i){
        toHTMLRegexp.push('|');
    }
}
var findFaceExp = new RegExp(toHTMLRegexp.join(''),'');
var facePositionRegexp = /^(?:.*background-position\s*:\s*-?(\d+))?(?:.*)?$/i;
var toTextRegexp = /&lt;(\/?\w+)\s?([^&gt;]*)&gt;/g;
function toTextReplacer(node,tag,attributes){
    var pos = attributes &amp;&amp; attributes.replace(facePositionRegexp,'$1');
    if(pos){
        return FACE_LIST[pos/19];
    }else{
        return '\n';
    }
}
toHTMLRegexp.push('|\r|\n|\r\n');
//prompt ( '',toHTMLRegexp.join('') + FACE_LIST);
toHTMLRegexp = new RegExp(toHTMLRegexp.join(''),'g');
function toHTMLReplacer(face){
    var pos = facePositionMap[face];
    //prompt("face:",face + toHTMLRegexp)
    //不能省略==null
    return pos==null ? '&lt;br&gt;': buildImage(face);
}

/**
 * 表情管理器
 */
var FaceManager = {
    /**
     * 初始化编辑器信息
     * @owner Layout
     */
    initialize:function(){
        R(FACE_BUTTON_ID).onclick = faceClick;
        var faceMap = R(FACE_CONTAINER_ID);
        var buf = [];
        for(var i = 0,len = FACE_LIST.length;i&lt;len;i++){
            buf.push(buildImage(FACE_LIST[i]));
        }
        faceMap.innerHTML = buf.join('');
        faceMap.onmouseover = faceMapMouseover;
        faceMap.onmouseout = faceMapMouseout;
        faceMap.onclick = faceMapClick;
        addEventObserver(document,'click',closeFaceDialogListener);
    },
    isActive:function(){
        return active;
    },
    /**
     * 替换掉字符
     */
    toText:function(html){
        html = html.replace(/[\r\n]/g,'').replace(/&amp;nbsp;/g,' ');
        return html.replace(toTextRegexp,toTextReplacer);
    },
    /**
     * 查找第一个表情符号
     */
    findFace:function(text){
        var match = text.match(findFaceExp);
        if(match){
            match = match[0];
            //var index = text.indexOf(match);
            return {
                //begin:index,
                //end:index + match.length,
                text:match,
                html:buildImage(match)
            }
        }
    },
    /**
     * 替换掉成HTML
     */
    toHTML:function(txt){
        txt = txt.replace(/(:!\s)\s/g,'&amp;nbsp;');
        return txt.replace(toHTMLRegexp,toHTMLReplacer);
    }
}
//UI 相关
/**
 * 对话框状态
 */
var active;
var tween = new Tween(0.1);
var tweenInterval;
/**
 * 显示隐藏表情对话框
 */
function faceClick(){
    var dialog = R(FACE_DIALOG_ID);
    if(tweenInterval){
        clearInterval(tweenInterval);
    }
    if(active = !active){
        tweenInterval = tween.opacity(dialog,0,1,onTweenComplete);
    }else{
        tweenInterval = tween.opacity(dialog,1,0,onTweenComplete);
    }
    if (window.ActiveXObject) {
        R(FACE_PAD_ID).style.display = 'block';
    }
}
function onTweenComplete(){
    //TODO: 以后Select 将改用Div模拟实现，这一步酒不需要了
    if (window.ActiveXObject) {
        R(FACE_PAD_ID).style.display = active?'block':'none';
    }
    tweenInterval = null;
}
/**
 * 选择表情
 */
function faceMapClick(event){
    var e = getFaceElement(event||window.event)
    if(e.tagName=='IMG'){
        var face = e.title;
        Editor.pasteHTML(buildImage(face));
        faceClick();
        updateFaceButton();
    }
}

/**
 * 点击页面其他地方时关闭表情选择面板
 */
function closeFaceDialogListener(event){
    if(active){
        //这里要加一个判断，如果没有打开，无需操作
        var event = event || window.event;
        var target = event.srcElement || event.target;
        while(target){
            if (target.id &amp;&amp; 
                (target.id == FACE_DIALOG_ID || target.id == FACE_BUTTON_ID)) {
                return true;
            }
            target = target.parentNode;
        }
        faceClick();
        updateFaceButton();
    }
}
function getFaceElement(event){
    if(event.stopPropagation){
        event.stopPropagation();
    }else{
        event.cancelBubble = true;
    }
    return (event.target || event.srcElement);
}

function faceMapMouseover(event){
    var e = getFaceElement(event||window.event)
    if(e.tagName=='IMG'){
        e.style.border='1px solid #949EA7'
    }
}
function faceMapMouseout(event){
    var e = getFaceElement(event||window.event)
    if(e.tagName=='IMG'){
        e.style.border='1px solid #FFF';
    }
}
function buildImage(face){
    return faceTemplate.replace('%1',face).replace('%2',facePositionMap[face])
}</entry>
<entry key='com/baidu/webim/ui/layout.js'>var OUTPUT_ID = "output";
var EDITOR_FRAME_ID = "editorFrame";
var INFO_SIDE_ID = "info";
var FONT_BAR_ID = 'fontBar';


/**
 * 布局管理器
 */
var Layout = {
    /**
     * 初始化布局，包括初始布局和事件注册
     * @owner Layout
     */
    initialize:function(){
        window.resizeBy(538-document.documentElement.clientWidth,425-document.documentElement.clientHeight);
        (window.onresize = update)();
    },
    /**
     * 更新布局
     * @owner Layout
     */
    update:update
}

/**
 * 窗口大小改变时控制布局
 */
function update(){
    var output = R(OUTPUT_ID);
    var height=document.documentElement.clientHeight - output.offsetTop - (41+22);
    var editorFrame = R(EDITOR_FRAME_ID);
    var info = R(INFO_SIDE_ID);
    var fontPane = R(FONT_BAR_ID);
    height = Math.max(height,300);
    output.style.height = height-85-27-1-5-fontPane.offsetHeight+"px";
    editorFrame.style.height=85 +"px";
    editorFrame.style.width=Math.max(output.clientWidth -90,50) +"px";
    
    //位置非常重要
    info.style.height = height +"px";
    UserTabMoveHandle.fixAdd();
}</entry>
<entry key='com/baidu/webim/ui/mask-manager.js'>var DIALOG_MASK_BACKGROUND_ID = "dialogMask";
var CONTAINER_ID = "dialogContainer";

var IM_LOADING_ID = "IMLoading";

var TAB_MASK_ID = "tabMask";
var tween = new Tween(0.3);
/**
 * 界面对话框【包含半透明遮盖背景】
 */
var MaskManager = {
    /**
     * 初始化 遮盖
     * @owner MaskManager
     */
    initialize:function(){
        R(CONTAINER_ID).clear();
        //currentInterval = 
        tween.opacity(R(DIALOG_MASK_BACKGROUND_ID),0.9,0.5);
    },
    /**
     * 脚本装载完成，取消遮盖。
     * @owner MaskManager
     */
    complete:function(){
        runtimeStatus = 0
        this.hide();
    },
    /**
     * 显示某个对话筐信息
     * @owner MaskManager
     */
    show:function(id){
        if(lastStatus == 1){
            this.hide();
        }
        lastStatus = 1;
        runTask(function(){
            runtimeStatus = 1;
            var item = R(showId = id);
            //currentInterval = 
            tween.opacity(item,0.5,1,completeTask);
            item.show("block");
        });
    },
    disableTab:function(value){
        R(TAB_MASK_ID).show(value?'block':'none');
    },
    /**
     * 隐藏遮盖及所有对话框
     * @owner MaskManager
     */
    hide:function(){
        lastStatus = 2;
        runTask(function(){
            runtimeStatus = 2;
            var item = R(showId);
            //currentInterval = 
            tween.opacity(item,1,0,completeTask);
            item.show("block");
        });
    }
}
//var currentInterval;
var showId = IM_LOADING_ID;
/**
 * 当前状态
 * 1:show
 * 2:hidden
 * 0:free;
 */
var runtimeStatus = 1;
/**
 * 队列中最终的状态
 */
var lastStatus;
var taskList = [];
function completeTask(){
    var task = taskList.shift();
    if(task){
//        if(currentInterval){
//            clearInterval(currentInterval);
//            currentInterval = null;
//        }
        task();
    }else{
        if(runtimeStatus == 2){
            R(DIALOG_MASK_BACKGROUND_ID).hide();
            R(CONTAINER_ID).hide();
        }
        runtimeStatus = 0;
    }
}
function runTask(fn){
    if(runtimeStatus){
        taskList.push(fn);
    }else{
        fn();
        R(DIALOG_MASK_BACKGROUND_ID).show('block');
        R(CONTAINER_ID).show('block');
    }
}
</entry>
<entry key='com/baidu/webim/ui/login-manager.js'>var LOGIN_FORM_ID = "loginForm";
var LOGINING_ID = "logining";
var USERNAME_INPUT_ID = "username";
var PASSWORD_INPUT_ID = "password";
var LOGIN_ERROR_ID = "loginError";
var LOGIN_BUTTON = "loginButton";

/**
 * 登陆管理
 */
var LoginManager = {
    /**
     * 初始化登陆模块
     * @owner LoginManager
     */
    initialize:function(){
        R(LOGIN_BUTTON).form.onsubmit = function(){
            //MaskManager.hide(LOGIN_FORM_ID);
            LoginManager.login(
              R(USERNAME_INPUT_ID).value,
              R(PASSWORD_INPUT_ID).value
            );
            return false;
        }
    },
    /**
     * @owner LoginManager
     */
    login:function(username,password){
        //用户名或密码为空时
        if (!username || !password) {
            return;
        }
        //if(loginStatus&gt;0){
            //this.logout();
        //}else{
          Controller.sendMessage(new LoginMessage(username,password));
          //loginStatus = 1;
        //}
    },
    /**
     * @owner LoginManager
     */
    showLogin:function(){
        MaskManager.show(LOGIN_FORM_ID);
    },
    /**
     * @owner LoginManager
     */
    logout:function(){
    }
}
//var loginStatus = 0;

/**
 * 登录消息类
 */
function LoginMessage(username,password){
    this.content = {username:username,password:password};
}
LoginMessage.prototype = new ClientSideMessage("login");

LoginMessage.prototype.before = function(msg){
    MaskManager.show(LOGINING_ID);
}
LoginMessage.prototype.after = function(msg){
    if(msg.type == 'ok'){
        //loginStatus = 2;
        //登陆成功
        MaskManager.hide(LOGINING_ID);
        R(LOGIN_ERROR_ID).innerHTML = '';
        Controller.start();
    }else{
        //loginStatus = 0;
        R(LOGIN_ERROR_ID).innerHTML = msg.content;
        LoginManager.showLogin();
        //MaskManager.show("login");
    }
}
</entry>
<entry key='com/baidu/webim/ui/user-selector.js'>var USER_SELECTOR_ID = "userSelector";
/**
 * tab 选择聊友的面板ID
 * @private
 */
var MATCH_LIST_ID = "matchList";
var REMOTE_INPUT_ID = "remoteId";
var USER_SELECT_BUTTON_ID = "selectUser";
var USER_UNEXIST_ID = "unexistUser";


/**
 * 选择新聊友时相关处理
 */
var UserSelector = {
    /**
     * 初始化
     * @public
     * @owner UserSelector
     */
    initialize:function(){
        var matchList = R(MATCH_LIST_ID);
        var remoteInput = R(REMOTE_INPUT_ID);
        var completeButton = R(USER_SELECT_BUTTON_ID);
        matchList.clear();
        completeButton.onclick = completeClick;
        completeButton.onmouseover = buildBackgroundPositionYListener(-22);
        completeButton.onmousedown = buildBackgroundPositionYListener(-44);
        completeButton.onmouseup = completeButton.onmouseout = buildBackgroundPositionYListener(0);
        remoteInput.onfocus = remoteInput.onkeyup = updateListListener;
        matchList.lastChild.onclick = clearList;
        (matchList = matchList.firstChild).onclick = selectUser;
        matchList.onmouseover = mouseoverUser;
        matchList.onmouseout = mouseoutUser;
        addEventObserver(document,'click',closeUserSelector);
    },
    /**
     * 显示新聊友选择筐
     * @public
     * @owner UserSelector
     */
    show:function(){
        UserTabFolder.addTab(true);
        listInitialized = false;
        R(USER_SELECTOR_ID).show('block');
        Layout.update();
    },
    /**
     * 隐藏用户选择块
     * @public
     * @owner UserSelector
     */
    hide:function(){
        R(USER_SELECTOR_ID).hide();
        closeList();
        R(USER_UNEXIST_ID).hide();
        R(REMOTE_INPUT_ID).value = '';
        Layout.update();
    },
    /**
     * 处理选择行为
     * @public
     * @owner UserSelector
     */
    complete:function(){
        closeList();
        var list = SharedData.contacts;
        var remoteId = R(REMOTE_INPUT_ID).value;
        var i = list &amp;&amp; list.length;
        if (!remoteId) {
            return;
        }
        if (list &amp;&amp; list[remoteId]) {
            while(i--){
                var item = list[i];
                if(item == remoteId){
                    item = list[item];
                    UserTabFolder.addUser({id:remoteId,name:item.name,status:item.status},true);
                    break;
                }
            }
            this.hide();

        }else{
            this.unExist();
            return;
        }

    },
    unExist: function () {
        R(USER_UNEXIST_ID).show("block");
        Layout.update();
    },
    
    clearUnExist: function() {
        R(USER_UNEXIST_ID).hide();
        Layout.update();
    }
}
var listInitialized;
var listTween = new Tween(0.2);
var listTweenInterval;
var listActive;
/**
 * this 不敏感
 */
function updateListListener(event){
    event = event || window.event;
    var keyCode = event &amp;&amp; event.keyCode;
    var matchBlock = R(MATCH_LIST_ID);
    if (!listActive) {
        if (listTweenInterval) {
            clearInterval(listTweenInterval);
        }
        listTweenInterval = listTween.opacity(matchBlock,0,1);
        listActive = true;
    }
    UserSelector.clearUnExist();
    if(keyCode){
        if(keyCode == 13){//回车
            if (currentUser != '') {
                R(REMOTE_INPUT_ID).value = currentUser;
            }
            return UserSelector.complete();
        } else if (!keySelect &amp;&amp; (keyCode == 38 || keyCode == 40)) {//前进后退
            return;
        }
        //TODO：需要优化(非法字符，有效字符：有效id字符和回退键)
        if(keyCode == 8){//退格
            
        }
    }
    if(!listInitialized || keyCode){
        updateList();
        if (keyCode == 38) {
            //点击上key时候，选择上一个user
            var selectedEl = getSelectedElement();
            if (selectedEl) {
                var pre = selectedEl.previousSibling;
                if (pre) {
                    currentUser = pre.innerHTML;
                    selectedEl.style.backgroundColor = '#F6FBFF';
                    pre.style.backgroundColor = '#D3E1EC';
                } else {
                    currentUser = '';
                }
            } else {
                var nodes = R(MATCH_LIST_ID).firstChild.childNodes;
                var nodesLen = nodes.length;
                if (nodesLen &gt; 0) {
                    var last = nodes[nodesLen - 1];
                    last.style.backgroundColor = '#D3E1EC';
                    currentUser = last.innerHTML;
                }
            }
        } else if (keyCode == 40) {
            //点击下key时候，选择下一个user
            var selectedEl = getSelectedElement();      
            if (selectedEl) {
                var next = selectedEl.nextSibling;
                if (next) {
                    currentUser = next.innerHTML;
                    selectedEl.style.backgroundColor = '#F6FBFF';
                    next.style.backgroundColor = '#D3E1EC';
                } else {
                    currentUser = '';
                }
            } else {
                var first = R(MATCH_LIST_ID).firstChild.firstChild;
                if (first) {
                    first.style.backgroundColor = '#D3E1EC';
                    currentUser = first.innerHTML;
                }
            }
        }
    }
}
function updateList(){
    if(!SharedData.contacts ){
        return setTimeout(updateList,1000);
    }
    listInitialized = true;
    var list = SharedData.contacts;
    var perfix = R(REMOTE_INPUT_ID).value;
    var buf = [];
    for(var i = 0,n = 0,len = list.length;i&lt;len;i++){
        var item = list[list[i]];
        var id = item.id;
        if(id 
          &amp;&amp; !id.indexOf(perfix)
          &amp;&amp; !UserTabFolder.openedTabs[id] 
          &amp;&amp; (n++&lt;10) ){
            buf.push("&lt;div class='");
            buf.push("tab-s");
            buf.push(item.status);
            buf.push("' title='");
            buf.push(item.name.replace(/[&lt;&gt;'&amp;]/g,toXmlEntryReplacer));
            buf.push("'&gt;");
            buf.push(id);
            buf.push("&lt;/div&gt;");
        }
    }
    //TODO:对于未匹配的行是否显示更多？
    R(MATCH_LIST_ID).firstChild.innerHTML = buf.join('');
}
function clearList(){
    var input = R(REMOTE_INPUT_ID);
    input.value ='';
    input.focus();
}
function completeClick(){
    UserSelector.complete();
}
function selectUser(event){
    //判断鼠标是否点击在用户项中
    if(!isUserListRegion(event)) {
        return;
    }
    
    var user = getUserElement(event).innerHTML;
    if(user.indexOf('@')&lt;0){
        return false;
    }
    R(REMOTE_INPUT_ID).value = user;//.replace(/^\s+|\s|$/,'');
    R(MATCH_LIST_ID).style.display='none';
    completeClick();
}
function closeList () {
    if (listActive) {
        if (listTweenInterval) {
            clearInterval(listTweenInterval);
        }
        listTweenInterval = listTween.opacity(R(MATCH_LIST_ID),1,0);
        listActive = false;
    }
}
//保存当前选定的用户
var currentUser = '';
var keySelect = true;
function mouseoverUser(event){
    //判断鼠标覆盖区域是否用户列表区域
    if(!isUserListRegion(event)) {
        return;
    }
    
    var currentEl = getSelectedElement();
    if (currentEl) {
        currentEl.style.backgroundColor = "#F6FBFF";
    }
    var userEl = getUserElement(event);
    userEl.style.backgroundColor = "#D3E1EC";
    currentUser = userEl.innerHTML;
    
    keySelect = false;
}
function mouseoutUser(event){
    getUserElement(event).style.backgroundColor = "#F6FBFF";
    keySelect = true;
}

/**
 * 判断MatchList上的事件触发区域是否用户列表区域
 */
function isUserListRegion (event) {
    var evt = event || window.event;
    var tarClass = (evt.srcElement || evt.target).className;
    return /tab-s[0-9]$/.test(tarClass);
}
function getUserElement(e){
    e = e || window.event;
    var e = e.target || e.srcElement;
    while(e.nodeType != 1){
        e = e.parentNode;
    }
    return e;
}
function getSelectedElement () {
    var options = R(MATCH_LIST_ID).firstChild.childNodes;
    if (currentUser == '')
        return null;
        
    for (var i = 0, l = options.length; i &lt; l; i++) {
        if (options[i].innerHTML == currentUser) {
            return options[i];
        }
    }
    return null;
}
function buildBackgroundPositionYListener(y){
    return function(){
        this.style.backgroundPosition = "0 "+y+"px";
   }
}

/**
 * 点击页面其他地方时关闭下拉选择条
 */
function closeUserSelector (event){
    var evt = event || window.event;
    var tar = evt.srcElement || evt.target;
    while(tar){
        if (tar.id &amp;&amp; 
            (tar.id == MATCH_LIST_ID || tar.id == REMOTE_INPUT_ID)) {
            return true;
        }
        tar = tar.parentNode;
    }
    closeList();
}
</entry>
<entry key='com/baidu/webim/ui/info-manager.js'>var MESSAGE_CONTAINER_ID = "messages";
var MESSAGE_ID_PERFIX = "__$msg";
var index = 0;
var tweenIn = new Tween(0.2);
var tweenOut = new Tween(2);
var tweenClickOut = new Tween(0.5);

/**
 */
var InfoManager = {
    /**
     * @owner InfoManager
     */
    initialize:function(){
         R(MESSAGE_CONTAINER_ID).clear();
    },
    /**
     * 在字体编辑区域显示一个提示消息。
     * 提示消息可以在1妙内渐入，显示5妙，渐出隐藏。
     */
    show:function(text){
        var exist = textIdMap[text];
        if(exist &amp;&amp; showMap[exist]){
            //alert(exist)
            showMap[exist](0,tweenClickOut);
            //alert(exist)
        }
        var msgContainer = R(MESSAGE_CONTAINER_ID);
        var msg = new Element('div');
        var id = msg.id = MESSAGE_ID_PERFIX + index++;
        var hideHandle = buildHideHandle(id,text);
        msgContainer.appendChild(msg);
        msg.innerHTML = text;
        showMap[textIdMap[text] = id] = msg.onclick = hideHandle;
        //alert([id,text,showMap[id],textIdMap[text]])
        msg.setOpacity(0);
        function show1Step(rate){
            msg.setOpacity(rate);
        }
        function show1Complete(){
            setTimeout(hideHandle,5000);
            msgContainer = msg = null;
        }
        tweenIn.start(show1Step,show1Complete);
        msgContainer.show('block');
        msgContainer.scrollIntoView();
        msg.scrollIntoView();
    }
}
var showMap = {};
var textIdMap = {};
function buildHideHandle(id,text){
    return function(event,tween){
        tween = tween || (this == window ? tweenOut : tweenClickOut);
        hide(id,text,tween);
    }
}

/**
 * 隐藏遮盖及所有对话框
 * @owner MaskManager
 */
function hide(id,text,tween){
    if(showMap[id]){
        delete showMap[id];
        delete textIdMap[text];
        var msg = R(id);
        var height = msg.offsetHeight*5;
        function show2Step(rate){
            msg.setOpacity(1-rate);
            if(rate&gt;0.8){
                rate = 1-rate
                msg.style.height = Math.floor(height*rate)+'px';
            }
        }
        function show2Complete(){
            var container = R(MESSAGE_CONTAINER_ID);
            container.removeChild(msg);
            msg = null;
            if(!container.hasChildNodes()){
                container.hide();
            }
        }
        tween.start(show2Step,show2Complete);
    }
}</entry>
<entry key='com/baidu/webim/ui/side-info.js'>/**
 * 默认头（无标签）
 */
var DEFAULT_HEAD_ID = "defaultInfoHead";
/**
 * 标签头
 */
var TAB_HEAD_ID = "tabInfoHead";
/**
 * 个人形象区
 */
var LOCAL_INFO_ID = "localInfo";
/**
 * 装载信息
 */
var REMOTE_LOADING_ID = "infoLoading";
/**
 * 聊友形象区
 */
var REMOTE_INFO_ID = "remoteInfo";
/**
 * 焦点区域
 */
var FOCUS_INFO_ID = "focusInfo";

//this.defaultHead = R(DEFAULT_HEAD_ID);
//this.tabHead = R(TAB_HEAD_ID);
//this.loading = R(REMOTE_LOADING_ID);
//this.localInfo = R(LOCAL_INFO_ID);
//this.remoteInfo = R(REMOTE_INFO_ID);
//this.focusInfo = R(FOCUS_INFO_ID);


//下次重构说明:
//不必自己加载用户基本信息,可以等待添加信息完成后更新基本信息
//需要一个焦点及基本信息补充细细装载的IFrame装载队列支持

/**
 * 用户侧栏信息控制逻辑
 */
var SideInfo = {
    /**
     * 初始化侧栏
     */
    initialize: function() {     
        /*构建我的信息*/
        var localImg = new Image();
        localImg.onload = function () {
            R(LOCAL_INFO_ID).appendChild(localImg);
            localImg = localImg.onload = null;
        }
        localImg.src = "img/show" + parseInt(Math.random()*4) + ".gif";
        
        /*事件的挂载*/
        var tabEls = R(TAB_HEAD_ID).clear().childNodes;
        tabEls[0].onclick = function () {
            showCommonCurrent();
        }
        tabEls[1].onclick = function () {
            showFocusCurrent();
        }
        tabEls = null;
    },
    /**
     * 显示用户详细信息（侧栏）
     * 当id为空是显示空白信息，当id为有效用户标识时，装载其详细资料并显示
     * @param &lt;String&gt;id 用户标识
     * @owner SideInfo
     * @public
     */
    show: function (id) {
        //return;
        hideInfo(); //隐藏当前信息
        if (!id) {
            showHead();
            R(REMOTE_LOADING_ID).hide();
            return;
        }
        if (containsUser(id)) {     //分支：已经加载
            setCurrentUser(id);         //设置当前显示用户
            showInfo(id);
            
        } else {                    //分支：仍未加载
            showHead();
            var remoteLoadingEl = R(REMOTE_LOADING_ID);
            remoteLoadingEl.show();
            
            /*向服务器端请求用户信息数据*/
            var detail = new DetailMessage(id);
            detail.after = function (msg) {
                if(msg &amp;&amp; msg.type == 'ok'){
                    var info = JSON.parse(msg.content);
                    
                    addUser(info);        //状态信息初始化
                    setCurrentUser(id);   //设置当前显示用户
                    buildInfo(info);     //根据用户信息构造用户信息界
                }else{
                    InfoManager.show("获取详细资料("+this.content+")失败："+ msg.content);
                }
                
                remoteLoadingEl.hide(); //隐藏loading
                
            }
            Controller.sendMessage(detail);
        }
    }
}

/**
 * 状态管理器
 */
var userContainer = [];
var currentUser = -1;
/**
 * 根据id获得Index
 */
function getUserIndex (id) {
    var len = userContainer.length;
    while (len--) {
        if (userContainer[len].id == id)
            return len;
    }
}
/**
 * 判断是否包含id的状态
 */
function containsUser (id) {
    for (var i = 0, l = userContainer.length; i &lt; l; i++) {
        if (userContainer[i].id == id) {
            return true;
        }
    }
    return false;
}
/**
 * 设置当前活动id
 */
function setCurrentUser (id) {
    for (var i = 0, l = userContainer.length; i &lt; l; i++) {
        if (userContainer[i].id == id) {
            currentUser = i;
            return;
        }
    }
    
    throw new Error("Id is not exist!!");
}
/**
 * 添加状态对象
 */
function addUser (msg) {
    var sta = {};
    sta.id = msg.id;
    sta.nick = msg.nick;
    sta.focus = !!msg.focus;
    if (sta.focus)
        sta.showFocus = true;
    
    userContainer.push(sta);
}


/**
 * 构建用户信息界面
 */
function buildInfo (uInfo) {
    buildCommon(uInfo);         //构建普通信息
    buildFocus(uInfo);          //构建焦点信息
    
    showHead(uInfo.focus);
    if (uInfo.focus) {                  //分支：包含焦点信息
        R(LOCAL_INFO_ID).hide();            //隐藏我的信息
        hideLastCommon(uInfo.id);           //隐藏普通信息
    } else {                            //分支：不包含焦点信息
        R(LOCAL_INFO_ID).show();            //显示我的信息
    }
}
/**
 * 构建用户信息界面[普通信息]
 */
function buildCommon (uInfo) {
    var el = new Element("div");
    var show = new Image();
    show.onload = function (){
        el.appendChild(show);
        show.onload = null;
    };
    show.src = uInfo.show;
    R(REMOTE_INFO_ID).appendChild(el);
}
/**
 * 构建用户信息界面[焦点信息]
 */
function buildFocus (uInfo) {
    var el = new Element("div");
    if (!uInfo.focus) {
        R(FOCUS_INFO_ID).appendChild(el);
        return;
    }
    
    var focs = uInfo.focus;
    var elHtml = [];
    for (var i = 0, l = focs.length; i &lt; l; i++) {
        var foc = focs[i];
        elHtml.push('&lt;img src="' + foc.img + '"&gt;&lt;a href="' + foc.url + '"&gt;' + foc.title + '&lt;/a&gt;&lt;br&gt;价格：' + foc.price + '&lt;br&gt;');
    }
    
    el.innerHTML = elHtml.join('');
    R(FOCUS_INFO_ID).appendChild(el);
}

/**
 * 显示已有的用户信息界面
 */
function showInfo (id) {
    var idx = getUserIndex(id);
    var sta = userContainer[idx];
    var cInfoEl = getRemoteEl(idx);
    var fInfoEl = getFocusEl(idx);
    
    showHead(sta.focus);
    if (sta.focus &amp;&amp; sta.showFocus) {       //分支：显示焦点信息
        showFocusCurrent();
    } else {                                //分支：显示普通信息
        if (sta.focus) {
            showCommonCurrent();
        } else {
            cInfoEl.show();
            fInfoEl.hide();
            R(LOCAL_INFO_ID).show();
        }
    }
}
/**
 * 隐藏已有的用户信息界面
 */
function hideInfo () {
    var idx = currentUser;
    if (idx &lt; 0) return;
    
    var cInfoEl = getRemoteEl(idx);
    cInfoEl.hide();
    R(LOCAL_INFO_ID).hide();
    showHead();
    
    var fInfoEl = getFocusEl(idx);
    fInfoEl.hide();
}
/**
 * 显示infoTab头
 */
function showHead (isTabHead) {
    var tabHead = R(TAB_HEAD_ID);
    var defaultHead = R(DEFAULT_HEAD_ID);
    if (isTabHead) {
        defaultHead.hide();
        tabHead.show();
        tabHead.style.backgroundPosition = "top";
    } else {
        defaultHead.show();
        tabHead.hide();
    }
}

function getRemoteEl (idx) {
    if (idx &gt;= 0){
        return R(REMOTE_INFO_ID).childNodes[idx];
    }
}
function getFocusEl (idx) {
    if (idx &gt;= 0){
        return R(FOCUS_INFO_ID).childNodes[idx];
    }
}
function hideLastCommon () {
    var remoteEl = R(REMOTE_INFO_ID);
    remoteEl.childNodes[remoteEl.childNodes.length - 1].hide();
}
/**
 * 显示用户焦点信息
 */
function showFocus (idx) {  
    getFocusEl(idx).show();
    getRemoteEl(idx).hide();
    R(LOCAL_INFO_ID).hide();
}
/**
 * 显示用户普通信息
 */
function showCommon (idx) {
    getFocusEl(idx).hide();
    getRemoteEl(idx).show();
    R(LOCAL_INFO_ID).show();
}
/**
 * 显示当前用户焦点信息
 */
function showFocusCurrent () {
    showFocus(currentUser);
    R(TAB_HEAD_ID).style.backgroundPosition = "top";
    userContainer[currentUser].showFocus = true;
}
/**
 * 显示当前用户普通信息
 */
function showCommonCurrent () {
    showCommon(currentUser);
    R(TAB_HEAD_ID).style.backgroundPosition = "bottom";
    userContainer[currentUser].showFocus = false;
}


/**
 * 获取用户详细资料（包括焦点信息）的请求消息
 */
function DetailMessage(userId){
    this.content = userId;
}
DetailMessage.prototype = new ClientSideMessage("detail");
DetailMessage.prototype.before = function(){
    //SideInfo.show();
}
/**
 * 
 */
DetailMessage.prototype.after = function(msg){
    if(msg.type=='ok'){
        
    }
}</entry>
<entry key='com/baidu/webim/xhrconnector.js'>/**
 * WEBIM XHR 连接层
 * @author jindw#xidea.org
 */
var XHRConnector = {
    /**
     * 初始化连接器（这里不会调用#waitMessage启动连接）
     * @owner XHRConnector
     */
    initialize:function(url){
        waitRequest = new Request(url,"DELETE",waitCallback,waitCallback);
        sendRequest = new Request(url,"POST",sendCallback,sendCallback);
    },
    /**
     * 等待消息。
     * 异步，发起等待请求，立即返回。无返回值
     * @owner XHRConnector
     * @see Controller#start
     */
    waitMessage : function(){
        if(!isConnected){
            isConnected = true;
            waitRequest.send('token='+new Date().getTime());
        }
    },
    /**
     * 发送消息。
     * 异步，发起发送请求，立即返回。无返回值
     * @owner XHRConnector
     * @param &lt;ClientSideMessage&gt; msg 
     * @see Controller#sendMessage
     */
    sendMessage : function(msg){
        sendList.push(msg);
        if(sendList.length==1){
            sendRequest.send(msg.toString());
        }
    },
    /**
     * 断开连接
     * @owner XHRConnector
     */
    disconnect:function(){
    }
}
/**
 * 连接器已经开始工作
 */
var isConnected;
/**
 * 等待消息请求对象
 */
var waitRequest;
/**
 * 发送消息请求对象
 */
var sendRequest;

/**
 * 消息队列设计
 */
var sendList = [];
/**
 * 发送消息的回调函数
 */
function sendCallback(){
      //do pre callback
      var msg = parseMessage(sendRequest,FeedbackMessage);
      var preSendData = sendList.shift()
      preSendData &amp;&amp; preSendData.after &amp;&amp; preSendData.after(msg);
      if(sendList.length){
          //prompt(sendRequest.free)
          sendRequest.send(sendList[0].toString());
      }
}
/**
 * 等待消息的回调函数
 */
function waitCallback(){
      isConnected = true;
      try{
          var msg = parseMessage(waitRequest,CommandMessage);
          var wait = Controller.receiveMessage(msg);
      }catch(e){
          //$log.error(e)
          $log.info(e)
      }
      if(wait &lt; 0){
          isConnected = false;
      }else{
          setTimeout(function(){
               waitRequest.send('token='+new Date().getTime());
          } ,wait);
      }
      
}

/**
 * 解析服务段消息（包含反馈消息）
 */
function parseMessage(request,type){
    var imc = request.getHeader("X-IMC");
    var content = request.getText();
    if(imc){
        //parse type
        return new type(imc,content);
    }else if(content!=null){//FF bug
        //出错处理
        return {
          type : "error",
          argument : content &amp;&amp; request.getStatus(),
          postTime : new Date(),
          revivedTime : new Date(),
          //TODO:
          execute:function(){return 5000},
          content:content
        };
    }
}</entry>
<entry key='com/baidu/webim/ui/uiconnector.js'>/*
 * WEBIM 脚本层 与UI层的粘合
 */
/**
 * ui 连接器，调用其 initianlize 方法初始化WEBIM
 */
var UIConnector = {
    /**
     * 初始化
     * @instanceof Function
     * @typeof function
     * @owner UIConnector
     */
    initialize : function(username,remoteId,detail){
        /**
         * 用户id
         * @owner UIConnector
         * @typeof string
         */
        UIConnector.id = username;
        /**
         * 当前对话对象用户名
         * @typeof string
         * @owner UIConnector
         */
        SharedData.remoteId = remoteId;
        //初始化连接器
        XHRConnector.initialize("/IMS");
        Controller.initialize(XHRConnector);
        for(var i = 0;i&lt;initializerList.length;i++){
            initializerList[i]();
        }
        window.onunload = this.destroy;
        
        var cook = new Cookie('TimeTramp');
        cook.set(new Date().getTime());
        setTimeout(function(){
            //TODO:WHY???
            if(remoteId ){
                UIConnector.open(remoteId,detail);
                UserContent.show(remoteId);
            }
            MaskManager.complete();
        },500);
    },
    open:function(user,detail){
        user &amp;&amp; UserTabFolder.addUser({id:user},true);
    },
    /**
     * 清理（销毁）函数
     * @typeof function
     * @owner UIConnector
     */
    destroy : function(){
        var cook = new Cookie('TimeTramp');
        cook.remove();
        XHRConnector.disconnect();
        for(var i = 0;i&lt;destroyerList.length;i++){
            destroyerList[i]();
        }
    },
    /**
     * 添加初始化函数
     * @instanceof Function
     * @typeof function
     * @owner UIConnector
     */
    addInitializer:function(initailizer){
        initializerList.push(initailizer);
    },
    /**
     * 添加清理函数
     * @instanceof Function
     * @typeof function
     * @owner UIConnector
     */
    addDestroyer:function(destroyer){
        destroyerList.push(destroyer);
    }
}

var destroyerList = [];
var initializerList = [];


//布局管理
UIConnector.addInitializer(function(){
    Layout.initialize();
});
//添加userTabFolder支持，添加输入筐事件响应支持
UIConnector.addInitializer(function(){
    UserTabFolder.initialize();
    UserTabMoveHandle.initialize();
    UserContent.initialize();
    UserSelector.initialize();
    UserSelector.show();
});
//添加侧栏支持
UIConnector.addInitializer(function(){
    SideInfo.initialize();
});
//添加编辑器支持
UIConnector.addInitializer(function(){
    Editor.initialize();
    EditorBar.initialize();
    FaceManager.initialize();
    FontManager.initialize();
});
//添加mask 支持
UIConnector.addInitializer(function(){
    MaskManager.initialize();
    LoginManager.initialize();
});

</entry>
<entry key='com/baidu/webim/shared-data.js'>/*
 * WEBIM UI 层的与消息层 的衔接面
 */

/**
 * @author jindw#xidea.org
 */
var SharedData = {
    /**
     * 自己的用户ID
     * @id SharedData.id
     * @typeof string
     */
    //id:null,
    /**
     * 用户显示名
     * @id SharedData.name
     * @typeof string
     */
    //name:null,
    /**
     * 当前聊天对象ID
     * @id SharedData.remoteId
     * @typeof string
     */
    //remoteId:null,
    
    /**
     * 联系人清单
     * 存储方式：Array:LinkedHashMap
     * @id SharedData.contacts
     * @typeof object
     * @instanceof Array
     */
    //contacts:[],
}

</entry>
<entry key='com/baidu/webim/message/server-side.js'>/**
 * 服务端消息
 * @public
 * @author jindw#xidea.org
 */
function ServerSideMessage(){
}
ServerSideMessage.prototype = {
    /**
     * 初始化消息函数
     * @owner ServerSideMessage.prototype
     */
    initialize : function(header,content){
        var args = header.split(',');
        /**
         * 消息名称
         * @owner ServerSideMessage.prototype
         * @typeof string
         */
        this.type = args.shift();
        /**
         * 消息源
         * @owner ServerSideMessage.prototype
         * @typeof string
         */
        this.from = args.shift();
        //this.to = args.shift();
        /**
         * 消息发送时间
         * @owner ServerSideMessage.prototype
         * @typeof string
         */
        this.postTime = new Date(parseInt(args.shift(),36));
        /**
         * 消息参数
         * @owner ServerSideMessage.prototype
         * @typeof string
         */
        this.param = args;
        //this.revivedTime = new Date();
        /**
         * 消息内容
         * @owner ServerSideMessage.prototype
         * @typeof string
         */
        this.content = content &amp;&amp; content.replace(/^\s+|\s+$/g,'');
    }
}
/**
 * 反馈消息
 * @param header 消息头信息
 * @param content 消息内容信息，可以是简单文本，也可以是json数据
 * @public
 * @author jindw#xidea.org
 */
function FeedbackMessage(header,content){
    this.initialize(header,content);
}
FeedbackMessage.prototype = new ServerSideMessage();
/**
 * 命令消息
 * @param header 消息头信息
 * @param content 消息内容信息，可以是简单文本，也可以是json数据
 * @public
 * @author jindw#xidea.org
 */
function CommandMessage(header,content){
    this.initialize(header,content);
    var type = ActionMap[this.type];
    if(type instanceof Function){
        /**
         * 服务端消息对应的执行脚本
         * @owner CommandMessage.prototype
         * @typeof string
         */
        this.execute = type;
    }else{
        //TODO:
    }
}
CommandMessage.prototype = new ServerSideMessage();
var ActionMap = {
    /**
     * 新到消息
     * @owner ActionMap
     * @public
     * @return &lt;boolean&gt; 是否终止消息收取,恒为false
     */
    message:function(){
        UserTabFolder.addMessage(this.from,this.from,FaceManager.toHTML(this.content),this.param,this.postTime);
    },
    /**
     * 下线,
     * @owner ActionMap
     * @public
     * @return &lt;int&gt; 下次消息等待时间,-1为终止消息接收,恒为-1
     */
    kickout:function(){
        LoginManager.showLogin();
        InfoManager.show(this.content || "您已经在别处登陆。被迫下线。");
        return -1;
    },
    /**
     * 发现用户未登陆，弹出登陆筐
     * @public
     * @owner ActionMap
     */
    login:function(){
        LoginManager.showLogin();
        return -1;
    },
    /**
     * 更新好友状态
     * @public
     * @owner ActionMap
     */
    status:function(){
        if(SharedData.contacts){
            var contact = SharedData.contacts[this.from];
            try{
            var content = JSON.parse(this.content);
            }catch(e){$log.info(e)}
            contact &amp;&amp; (contact.status = content.status);
            SharedData.contacts.sort(sortContacts);
            UserTabFolder.setStatus('jindw@xidea.org',content);
        }
    },
    /**
     * 更新好友列表
     * @owner ActionMap
     */
    contacts:function(){
        var contacts = [];
        try{
        var content = JSON.parse(this.content);
        }catch(e){$log.info(e)}
        var i = content.length;
        while(i--){
            var contact = content[i];
            contacts[contacts[i] = contact.id] = contact;
        }
        SharedData.contacts = contacts;
        contacts.sort(sortContacts);
    },
    /**
     * 错误报告
     * @owner ActionMap
     * @public
     * @return &lt;int&gt; 下次消息等待时间,-1为终止消息接收,根据用户决定？
     */
    error:function(){
        //TODO:这个问题需要优化
        //prompt("错误："+this.content)
        return confirm("错误："+this.argument+";是否继续\n",this.content)?1:-1
    },
    /**
     * 刷新连接
     * @owner ActionMap
     * @public
     */
    reconnect:function(){
    }
};

function sortContacts (a, b) {
    var aObj = SharedData.contacts[a];
    var bObj = SharedData.contacts[b];
    if (aObj.status != bObj.status) {
        return aObj.status - bObj.status;
    }
    return a.localeCompare(b);
}
</entry>
</properties>
