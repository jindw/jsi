<script-map>
<script path='example/hello-world.js'>/**
 * 
 */
var message = "Hello World";;;;

/**
 * 测试Hello World
 */
function sayHello(){
  alert(message);
}</script>
<script path='example/hello-world2.js'><![CDATA[/**
 * 
 */
var message = "Hello World";;;;

/**
 * 测试Hello World
 */
function sayHello(){
  alert(message);
}]]></script>

<script path='example/hello-world3.js' encoding="base64">
LyoqCiAqIAogKi8KdmFyIG1lc3NhZ2UgPSAiS
GVsbG8gV29ybGQiOzs7OwoKLyoqCiAqIOa1i+ivlUhlbGxvIFdvcmxkCiAqLwpmdW5jdGlvbiBzYXlIZWxsbygpewogIGFsZXJ0KG1lc3NhZ2UpOwp9
</script>

<script path='example/internal/guest.js'>/*
 * 测试调试模式下的自动变量查找
 * 这里所有的文件变量都将公开
 */



/**
 * 这是一个公开对象，在JSI中存在注册，可以通过$import函数导入
 * @public
 */
var Guest = {
    /**
     * 这是一个公开方法，隶属于Guest对象。
     * @public
     */
    sayHello:function(){
        alert(buildMessage("Guest"))
    }
}
/**
 * 构建问候语
 * @public
 * @param &lt;String&gt; name 游客名字
 * @return &lt;String&gt; 问候消息
 */
function buildMessage(name){
    return "大家好，我是 [%1]".replace('%1',name);
}</script>
<script path='example/internal/jindw.js'>/**
 * 这是一个公开对象，在JSI中存在注册，可以通过$import函数导入
 * @public
 */
var Jindw = {
    /**
     * 这是一个公开方法，隶属于Guest对象。
     * @public
     */
    sayHello:function(){
        alert(buildMessage())
    }
}
/**
 * 这是一个内部变量（文件内私有）
 * @internal
 */
var message = "大家好，我是 [%1]";
/**
 * 这是一个内部函数（文件内私有）
 * @internal
 */
function buildMessage(){
    var name = 'Jindw'
    return message.replace('%1',name);
}</script>
<script path='example/__package__.js'>/*
 */
this.addScript('hello-world.js',['sayHello','message']);
</script>
<script path='example/internal/__package__.js'>/*
 * 这个包中，我们重点演示JSI隔离冲突的一种方式--内部元素(脚本内私有对象)。
 * 在JSI中，我们隔离冲突主要有两种方式：
 * 一种就是脚本隔离－－即该实例中的内部元素；
 * 另外一种是包之间的隔离－－相对更容易理解，但是不好示例，留给读者自信体会吧...。
 */
this.addScript('jindw.js','Jindw');//测试调试模式下的自动变量查找
this.addScript('guest.js','*');


/*
$import("example.internal.Jindw");
$import("example.internal.Guest");
Jindw.sayHello();
Guest.sayHello();
*/</script>
</script-map>
